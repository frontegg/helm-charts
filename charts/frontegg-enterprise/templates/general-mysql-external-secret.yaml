{{- if and .Values.initDbJob.enabled .Values.initDbJob.createCredentialsSecret -}}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: general-mysql-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "frontegg-enterprise.labels" . | nindent 4 }}
  annotations:
    # Create this very early, before jobs/deployments needing DB access
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-20"
    "helm.sh/hook-delete-policy": before-hook-creation # Secret should persist
    "argocd.argoproj.io/sync-wave": "-20"
spec:
  refreshInterval: "1h" # Or desired interval
  secretStoreRef:
    name: external-secret-store # Assuming this is your cluster-wide store
    kind: ClusterSecretStore
  target:
    name: general-mysql-credentials
    creationPolicy: Owner
    template:
      engineVersion: v2
      # We extract specific keys into the data field for direct use by the job
      data:
        host: "{{ .host }}"
        username: "{{ .username }}"
        password: "{{ .password }}"
  # Fetch the whole secret content and extract specific keys
  dataFrom:
  - extract:
      key: prod-main-secret20250407120514343900000001
      # Use Go template processing within the conversion strategy
      conversionStrategy: "Template"
      template:
        data:
          # Note: Use jsonpath parsing on the YAML content
          host: "{{ .databases.generalMysql.host }}"
          username: "{{ .databases.generalMysql.username }}"
          password: "{{ .databases.generalMysql.password }}"
{{- end }} 