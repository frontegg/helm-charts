# Configuration for the admins service
admins:
  # name specifies the name identifier for the admins service components.
  name: admins
  # team specifies the team associated with this service.
  team: frontegg
  # envID specifies the environment identifier (e.g., local, dev, prod).
  envID: prod

  image:
    # repository specifies the Docker image repository for the admins service.
    repository: frontegg/admins-service
  # web contains configurations specific to the web deployment of the admins service.
  web:
    # enabled specifies whether the web component of the admins service is enabled.
    enabled: true
    # command overrides the default entrypoint command for the container.
    command: [ "/bin/bash" ]
    # args specifies the arguments passed to the command.
    args: [ "entrypoint.sh" ]
    # resources specifies the CPU and memory resource requests and limits for the container.
    resources:
      # requests specifies the minimum resources required.
      requests:
        # cpu specifies the requested CPU amount.
        cpu: 500m
        # memory specifies the requested memory amount.
        memory: 1Gi
      # limits specifies the maximum resources allowed.
      limits:
        # memory specifies the memory limit.
        memory: 1Gi
    # service defines the Kubernetes service configuration for the web component.
    service:
      # ports defines the ports exposed by the service.
      ports:
        # port is the port number the service listens on.
        - port: 80
          # targetPort is the port on the pod that the service forwards traffic to.
          targetPort: 3004
          # protocol specifies the network protocol (TCP or UDP).
          protocol: TCP
          # name is the name of the port.
          name: http
    # ports defines the container ports to open.
    ports:
      # name is the name of the container port.
      - name: http
        # containerPort is the port number inside the container.
        containerPort: 3004
    # autoscaling configures Horizontal Pod Autoscaler (HPA) for the web deployment.
    autoscaling:
      # enabled specifies whether HPA is enabled.
      enabled: true
      # minReplicas specifies the minimum number of replicas.
      minReplicas: 2
      # maxReplicas specifies the maximum number of replicas.
      maxReplicas: 10
      # targetCPUUtilizationPercentage specifies the target average CPU utilization across all pods.
      targetCPUUtilizationPercentage: 50
      # targetMemoryUtilizationPercentage specifies the target average memory utilization across all pods.
      targetMemoryUtilizationPercentage: 50
    # livenessProbe configures the liveness probe to check if the container is running.
    livenessProbe:
      # failureThreshold specifies how many times the probe can fail before the container is restarted.
      failureThreshold: 3
      # httpGet specifies an HTTP GET request to perform for the probe.
      httpGet:
        # path specifies the URL path to access on the container.
        path: /health
        # port specifies the name or number of the port to access on the container.
        port: http
      # initialDelaySeconds specifies the number of seconds after the container has started before the probe is initiated.
      initialDelaySeconds: 20
      # periodSeconds specifies how often (in seconds) to perform the probe.
      periodSeconds: 10
    # readinessProbe configures the readiness probe to check if the container is ready to serve traffic.
    readinessProbe:
      # httpGet specifies an HTTP GET request to perform for the probe.
      httpGet:
        # path specifies the URL path to access on the container.
        path: /health
        # port specifies the name or number of the port to access on the container.
        port: http
      # initialDelaySeconds specifies the number of seconds after the container has started before the probe is initiated.
      initialDelaySeconds: 5
      # periodSeconds specifies how often (in seconds) to perform the probe.
      periodSeconds: 5
  # configmap defines the configuration map for the admins service.
  configmap:
    # data contains the key-value pairs for the configmap.
    data:
      # CLOUD_ENVIRONMENT specifies the cloud environment type.
      CLOUD_ENVIRONMENT: production
      # NODE_ENV specifies the Node.js environment.
      NODE_ENV: production
      # FRONTEGG_CONFIG_FILE_PATH specifies the path to the Frontegg configuration file.
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"

  configuration:
    map:
      config-center:
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        PORTAL_URL: portal-url
        FRONTEGG_KAFKA_VENDORS_TOPIC_NAME: data-ingest-kafka-vendors-topic

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml }}
      FRONTEGG_EVENT_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
    additionalSecrets: ""


config-center:
  externalServices:
    secrets:
      url: ""
    iot:
      topic: ""
    aws:
      region: ""
      componentsCollectionIdentifier: ""

  frontegg:
    general:
      analytics:
        segmentAnalyticsEnabled: "false"
        useFirehoseAnalytics: "true"
      portalUrl: ""
      corsOrigin: ""
      portalV1Url: ""
      customDomainCloudflareEndpoint: ""
      tracingCollectorEndpoint: "http://logzio-otel-traces.observability.svc.cluster.local:14268/api/traces"
      idgwApplicationId: ""
      splitioProxyEndpoint: "http://split-proxy-v2-web.feature-management.svc.cluster.local"
    applications:
      audits:
        auditsTopicName: "audits-v1"
        auditsDbType: "mysql"
        auditsDbName: "frontegg_audits"
        metadataServiceFetchPubsubStrategy: "true"
        metadataServiceTopicName: "METADATA_UPDATED"
        auditsServiceRedisDbIndex: "2"
        auditsKafkaRetryCount: "3"
      authentication:
        authenticationCookieDomain: ""
        authenticationSecuredCookie: ""
      apiGateway:
        apiGatewayUsageReportingEnabled: ""
        apiGatewayMetricsEnabled: ""
        apiGatewayRedisDbIndex: "9"
        enableMultiHosts: ""
        apiGatewayEnableRateLimiters: ""
        apiGatewayEnableRedisStore: ""
        apiGatewayIgnoredHosts:
        redirectEnabled: "false"
        redirectUrl: ""
      connectorsWorker:
        connectorsWorkerServiceRedisDbIndex: "5"
      dashboard:
        mixpanelId: ""
        dashboardHubspotEnabled: ""
        dashboardDevrevEnabled: "true"
        devrevApiUrl: "https://api.devrev.ai"
        dashboardDomainSuffix: ""
        cdnUrl: ""
        cdnBucket: ""
        backofficeViewerRoleId: ""
        backofficeEditorRoleId: ""
        fronteggUiEventsUrl: "https://ui-events.frontegg.com"
      events:
        eventsServiceRedisDbIndex: "7"
      identity:
        identityServiceDbName: "frontegg_identity"
        identityServiceAuditTriggeredTopicName: "AUDIT_TRIGGERED"
        identityServiceMaxConcurrentSessions: "100"
      metadata:
        metadataServiceDbConnectionTimeoutMs: "30000"
        metadataServiceDbConnectionRetryAttempts: "3"
        metadataServiceDbConnectionRetryDelay: "1000"
        metadataServiceRedisDbIndex: "0"
      notifications:
        eventsPubsubTopic: "events"
      reportingEngine:
        assetBlobStorageContainerName: "vendor-assets"
        reportingEngineApproversNotificationEmailTemplateId:
        iotRedisDbIndex: "4"
        iotRedisRecordTtlSeconds: "600"
        iotRedisMaxPollTimeoutMs: "60000"
        iotRedisPollIntervalMs: "1000"
        bucketUrl: ""
      reportsScheduler:
        reportingServiceFetchPubsubStrategy: "true"
        reportingServiceTopicName: "reporting-changes"
      subscription:
        stripeRegion: "eu"
        defaultStripeRegion: "eu"
      teamManagement:
        teamManagementServiceDbName: "frontegg_team_management"
        teamManagementServiceRedisDbIndex: "1"
        teamManagementServiceAuthorizationTopicName: "authorization-v1"
      tenants:
        tenantsUsageReportingTopicName: "usage-reporting-v1"
        tenantsRedisDbIndex: "8"
        tenantsServiceMysqlDbName: "frontegg_tenants"
        tenantAssetsS3Bucket: ""
        tenantAssetsS3Url: "https://{{ .Values.externalServices.aws.componentsCollectionIdentifier }}-tenants-assets.s3.{{ .Values.externalServices.aws.region }}.amazonaws.com"
        s3:
          tenantsServiceAwsEndpoint: ""
          tenantsServiceTenantAssetsS3Endpoint: ""
      customCode:
        lambda:
          management:
            roleArn: ""
          execution:
            roleArn: ""
            defaultPolicies: ""
          environment:
            variables:
              cxDomain: ""
          layers: ""
      vendors:
        vendorsServiceMysqlDbName: "frontegg_vendors"
        vendorsAssetBlobStorageContainerName: "public-vendor-assets"
        vendorsServiceVendorsDomain: "dev.frontegg.com"
        customDomainClusterIngressClass: "nginx"
        customDomainClusterIssuerName: "letsencrypt"
        customDomainClusterDefaultPort: "443"
        customDomainClusteNamespace: "custom-domains"
        customDomainSslEndpoint: ""
        customDomainCloudflareTransformRuleSetId: "xxxx"
        customDomainCloudflareOriginRuleSetId: "xxxx"
        kafkaVendorsTopic: "vendors-v1"
      webhooks:
        webhookServiceMongodbConnectionRetryAttempts: "3"
        webhookServiceMongodbConnectionRetryDelay: "1000"
        webhookMysqlDbName: "frontegg_webhooks"
        proxyEnabled: "true"
      webpush:
        webpushMongodbConnectionRetryAttempts: "3"
        webpushMongodbConnectionRetryDelay: "1000"
      sidekick:
        sidekickAllowedOrigin: "*"
        sidekickTenantId: ""
      dataIngest:
        dataIngestDbSchema: "frontegg_ingest"
        dataIngestKafkaTopic: "usage-reporting-v1"
        dataIngestKafkaVendorsTopic: "vendors-v1"
      pqlProcess:
        pqlProcessHubspotEnableCompaniesSync: ""
        pqlProcessHubspotEnableReporting: ""
      oauth:
        oauthServiceDbName: "frontegg_oauth"
        oauthServiceRedisDbIndex: "10"
      policy:
        opaPolicyBucket: ""
        configCopyResultTopicName: "configuration-copy-result-v1"
        configCopyTopicName: "configuration-copy-v1"
      envDuplicator:
        configCopyResultTopicName: "configuration-copy-result-v1"
        configCopyTopicName: "configuration-copy-v1"
        dbName: "frontegg_env_duplicator"
      pricingViews:
        reactAppFronteggPricingUrl: "https://{{ .Values.externalServices.aws.componentsCollectionIdentifier }}-pricing-views-bundles.s3.{{ .Values.externalServices.aws.region }}.amazonaws.com/static"
        reactAppFronteggPricingTemplateId: ""
      backoffice:
        redis:
          redisDbIndex: "12"
      entitlements:
        redisDBIndex: "12"
        vendorSnapshotJobDelayMS: "10000"
        vendorSnapshotJobAttempts: "3"
        opaPolicyBucket: ""
      forwardProxy:
        isAuthRequired: "false"
        host: "frontegg-forward-proxy"
        port: "8080"
        protocol: "http"


    services:
      prehookServiceUrl: "http://frontegg-prehook-service"
      adminsServiceUrl: "http://frontegg-admins-service"
      auditsServiceUrl: "http://frontegg-audits-service"
      authenticationServiceUrl: "http://frontegg-authentication-service"
      metadataServiceUrl: "http://frontegg-metadata-service"
      notificationServiceUrl: "http://frontegg-notification-service"
      reportsEngineUrl: "http://frontegg-reporting-engine"
      reportsServiceUrl: "http://frontegg-reporting-service"
      teamServiceUrl: "http://frontegg-team-management-service"
      vendorsServiceUrl: "http://frontegg-vendors-service"
      tenantsServiceUrl: "http://frontegg-tenants-service"
      webpushServiceUrl: "http://frontegg-webpush-service"
      webhookServiceUrl: "http://frontegg-webhook-service"
      eventsServiceUrl: "http://frontegg-event-service"
      identityServiceUrl: "http://frontegg-identity-service"
      identityP1ServiceUrl: "http://frontegg-identity-service-hp"
      integrationsServiceUrl: "http://frontegg-integrations-service"
      apiGatewayUrl: "https://dev-api.frontegg.com"
      apiGatewayInternalUrl: "http://api-gateway-v2-web"
      oauthServiceUrl: "http://frontegg-oauth-service"
      subscriptionsServiceUrl: "http://frontegg-subscriptions-service"
      policyServiceUrl: "http://frontegg-policy-service"
      usageTrackingUrl: "http://usage-tracking-service"
      envDuplicatorUrl: "http://frontegg-env-duplicator-service"
      dashboardEnvBuilderUrl: "http://frontegg-dashboard-env-builder-service"
      backofficeUrl: "http://frontegg-backoffice-service"
      pricingViewsUrl: "http://frontegg-pricing-views-service"
      emailServiceUrl: "http://frontegg-email-service"
      directoryServiceUrl: "http://frontegg-directory-service"
      logsServiceUrl: "http://frontegg-logs-service"
      logsStreamingServiceUrl: "http://frontegg-logs-streaming-service"
      entitlementsServiceUrl: "http://frontegg-entitlements-service"
      securityEnginesUrl: "http://frontegg-security-engines"
      securityCenterServiceUrl: "http://frontegg-security-center-service"
      signalsServiceUrl: "http://frontegg-signals-service"
      applicationsServiceUrl: "http://frontegg-applications-service"
      customCodeServiceUrl: "http://frontegg-custom-code-service"
      entitlementsAgentUrl: "http://frontegg-entitlements-agent"
      authHubServiceUrl: "http://auth-hub-v2-web"
      nlpExecutionAssistantUrl: "http://nlp-execution-assistant-v2-web"
      anomalyDetectionUrl: "http://anomaly-detection-v2-web"
      fronteggVendorHost: "EMPTY"
