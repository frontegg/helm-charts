# Configuration for the initial database setup job
initDbJob:
  enabled: true # Set to true to run this job
  image:
    repository: mysql
    tag: "8.0"
    pullPolicy: IfNotPresent
  # Add annotations or resource requests/limits if needed
  # annotations: {}
  # resources: {}
# Configuration for the admins service
admins:
  name: admins
  team: frontegg
  envID: &envId "prod-main-secret20250407120514343900000001"
  appVersion: master-latest
  image:
    repository: frontegg/admins-service
    prefix: &imagePrefix 527305576865.dkr.ecr.us-east-1.amazonaws.com/docker-hub/
  argoRollouts:
    enabled: false
  defaults: &defaultsAnnotations
    migration:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-5"
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    configmap:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    secret:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    sereviceAccount:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"

  web:
    enabled: true
    command: [ "/bin/bash" ]
    args: [ "entrypoint.sh" ]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3004
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3004
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
  configmap:
    data:
      CLOUD_ENVIRONMENT: production
      NODE_ENV: production
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
  configuration:
    map:
      config-center:
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        PORTAL_URL: portal-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml }}
      FRONTEGG_EVENT_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
    additionalSecrets: ""

############## SPLIT #############
#team-management-service:
#  name: team-management
#  team: tamago
#  envID: local
#
#  image:
#    repository: frontegg/team-management-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3003
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3003
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    livenessProbe:
#      failureThreshold: 3
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 40
#      periodSeconds: 20
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#    labels:
#      scrape-for-metrics: enabled
#    replicaCount: 1
#    nodeSelector:
#      workload: general
#    service:
#      ports:
#        - port: 80
#          targetPort: 3003
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3003
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    livenessProbe:
#      failureThreshold: 5
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 60
#      periodSeconds: 60
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: team-management-service
#      NODE_ENV: production
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_ANALYTICS_TYPE: firehose
#      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.yaml"
#      LOG_LEVEL: verbose
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 300m
#            memory: 500Mi
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ENV_ID: env-id
#        FRONTEGG_METADATA_SERVICE_URL: metadata-service-url
#        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
#        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
#        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
#        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
#        FRONTEGG_AUTHORIZATION_KAFKA_TOPIC_NAME: team-management-service-authorization-topic-name
#        FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_DB_INDEX: team-management-service-redis-db-index
#        FRONTEGG_ASSET_BLOB_STORAGE_CONTAINER_NAME: vendors-asset-blob-storage-container-name
#        FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_NAME: team-management-service-db-name
#        FRONTEGG_TEAM_MANAGEMENT_SERVICE_VAULT_URL: team-management-service-vault-url
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_USE_FIREHOSE_ANALYTICS: use-firehose-analytics
#        FRONTEGG_CDN_BUCKET: cdn-bucket
#        FRONTEGG_AWS_REGION: aws-region
#        FRONTEGG_CDN_URL: cdn-url
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_METADATA_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
#      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
#      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
#      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      AZURE_CLIENT_ID={{ $secret.externalServices.azure.clientId | toYaml }}
#      AZURE_CLIENT_SECRET={{ $secret.externalServices.azure.clientSecret | toYaml }}
#      AZURE_TENANT_ID={{ $secret.externalServices.azure.tenantId | toYaml }}
#      FRONTEGG_ASSET_BLOB_STORAGE_CONNECTION_STRING={{ $secret.databases.storage.azure.connectionString | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
#      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
#      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_SECRETS_PHRASE={{ $secret.frontegg.applications.teamManagement.secretPhrase | toYaml }}
#      FRONTEGG_FIREHOSE_ACCESS_KEY_ID={{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
#      FRONTEGG_FIREHOSE_SECRET_ACCESS_KEY={{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
#      FRONTEGG_AWS_FIREHOSE_REGION={{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
#      FRONTEGG_CLOUDFLARE_PURGE_CACHE_ZONE_ID={{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
#      FRONTEGG_CLOUDFLARE_PURGE_CACHE_TOKEN={{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
#      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
#      FRONTEGG_SPLIT_IO_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_SPLIT_IO_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_SPLIT_IO_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#
#    additionalSecrets: ""

webhooks:
  name: webhooks
  team: frontegg
  envID: *envId
  appVersion: master-latest
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/webhook-service
    prefix: *imagePrefix
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3013
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3013
    env:
      - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
        value: "false"
    podAnnotations:
      config.linkerd.io/skip-outbound-ports: "8080"
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
      failureThreshold: 3
    livenessProbe:
      httpGet:
        path: /health
        port: http
      failureThreshold: 30
      periodSeconds: 10
    startupProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 15

  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3013
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3013
    env:
      - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
        value: "true"
    labels:
      scrape-for-metrics: enabled
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    startupProbe:
      httpGet:
        path: /health
        port: http
      failureThreshold: 30
      periodSeconds: 10
    livenessProbe:
      httpGet:
        path: /health
        port: http
      periodSeconds: 10
      failureThreshold: 30

  configmap:
    data:
      NODE_ENV: production
      FRONTEGG_PORT: "3013"
      FRONTEGG_SERVICE_NAME: webhook-service
      FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_ATTEMPTS: "3"
      FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_DELAY: "1000"
      FRONTEGG_EVENT_SERVICE_URL: http://frontegg-event-service
      FRONTEGG_EVENTS_PUBSUB_TOPIC: events
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_USE_FIREHOSE_ANALYTICS: "false"
      FRONTEGG_ANALYTICS_TYPE: firehose
      FRONTEGG_VALIDATION_WEBHOOK_URL_HOSTNAME_BLACKLIST_REGEXP: (169\.254\.\d+.\d+)|(127\.0\.0\.1)
      FRONTEGG_WEBHOOK_GUARD_FEATURE_FLAG_NAME: "webhooks_blacklist"
      FRONTEGG_HTTP_CLIENT_PROXY_AUTH_ENABLED: "false"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      NODE_NO_WARNINGS: "1"

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_WEBHOOK_MYSQL_DB_NAME: webhook-mysql-db-name
        FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_ATTEMPTS: webhook-service-mongodb-connection-retry-attempts
        FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_DELAY: webhook-service-mongodb-connection-retry-delay
        FRONTEGG_EVENTS_PUBSUB_TOPIC: events-pubsub-topic
        FRONTEGG_HTTP_CLIENT_PROXY_ENABLED: webhook-proxy-enabled
        FRONTEGG_HTTP_CLIENT_PROXY_HOST: frontegg-proxy-host
        FRONTEGG_HTTP_CLIENT_PROXY_PORT: frontegg-proxy-port
        FRONTEGG_HTTP_CLIENT_PROXY_PROTO: frontegg-proxy-protocol

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.webhooksServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      splitIO:
        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mongoDB:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      internalServices:
        eventService:
          apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      analytics:
        firehose:
          aws:
            keyId: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
            secretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
            region: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}

    additionalSecrets: ""

vendors-service:
  name: vendors
  team: frontegg
  envID: *envId
  appVersion: master-latest
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/vendor-service
    prefix: *imagePrefix
  web:
    enabled: true
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3001
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3001
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
      advanced:
        horizontalPodAutoscalerConfig: # Optional. Section to specify HPA related options
          name: '{{ include "web.name" $ }}'
          behavior:
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
                - type: Pods
                  value: 1
                  periodSeconds: 60
            scaleUp:
              stabilizationWindowSeconds: 0
              policies:
                - type: Pods
                  value: 3
                  periodSeconds: 10
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
  worker:
    enabled: true
    nodeSelector:
      workload: general
    service:
      ports:
        - port: 80
          targetPort: 3001
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3001
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: vendors-service
      NODE_ENV: production
      FRONTEGG_SEGMENT_ENABLED: "false"
      FRONTEGG_SEGMENT_GOOGLE_ENABLED: "false"
      MIGRATION_DIR_PATH: "./dist/typeorm-migrations"
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      NODE_NO_WARNINGS: "1"
      SENTRY_ENABLED: "false"
      LOG_LEVEL: verbose
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKeyEncryptionSecret: {{ $secret.frontegg.applications.vendors.apiKeySecret | toYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      fronteggApiKey: {{ $secret.frontegg.xxx.fronteggApiKey | toYaml }}
      fronteggPrivateKey: {{ $secret.frontegg.applications.authentication.authenticationPrivateKey | toYaml }}
      splitIO:
        webhooks:
          secret: {{ $secret.externalServices.split.webhooks.secret | toYaml }}
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
        redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
      webhookSecret: {{ $secret.frontegg.applications.vendors.webhookSecret | toYaml }}
      prehookSecret: {{ $secret.frontegg.applications.vendors.prehookSecret | toYaml }}
      adminsService:
        apiKey: {{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      tenantsService:
        apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
      identityService:
        apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        baseP1Url: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      teamManagementService:
        apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      database:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
        mongoDb:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
      mixpanel:
        token: {{ $secret.externalServices.mixpanel.token | toYaml }}
      heap:
        appId: {{ $secret.externalServices.heapApp.id | toYaml }}
      segment:
        writeKey: {{ $secret.frontegg.analytics.segmentWriteKey | toYaml }}
      segmentToGoogleAnalytics:
        writeKey: {{ $secret.frontegg.applications.vendors.segmentGoogleWriteKey | toYaml }}
      customDomainSettings:
        credentials:
          clusterContextString: {{ $secret.frontegg.applications.vendors.customDomains.clusterContext | toYaml }}
        cloudflare:
          zone: {{ $secret.frontegg.applications.vendors.customDomains.cloudflareZone | toYaml }}
          token: {{ $secret.frontegg.applications.vendors.customDomains.cloudflareToken | toYaml }}
        secretHeader: {{ $secret.frontegg.customDomains.secretHeader | toYaml }}
      assetsStorage:
        connectionString: {{ $secret.databases.storage.azure.connectionString | toYaml }}
      redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
          tls: {{ $secret.databases.redis.tls | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
      cloudflare:
        cdn:
          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_IDENTITY_P1_SERVICE_URL: identity-p1-service-url
        FRONTEGG_CUSTOM_DOMAIN_CLOUDFLARE_SSL_ENDPOINT: custom-domain-cloudflare-ssl-endpoint
        FRONTEGG_PORTAL_URL: portal-url
        FRONTEGG_VENDORS_SERVICE_DB_NAME: vendors-mysql-db-name
        FRONTEGG_KAFKA_VENDORS_TOPIC_NAME: vendors-service-kafka-vendors-topic
        ASSET_BLOB_STORAGE_CONTAINER_NAME: vendors-asset-blob-storage-container-name
        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_INGRESS_CLASS: custom-domain-cluster-ingress-class
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_ISSUER_NAME: custom-domain-cluster-issuer-name
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_DEFAULT_PORT: custom-domain-cluster-default-port
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_NAMESPACE: custom-domain-cluste-namespace
        FRONTEGG_SSL_ENDPOINT: custom-domain-ssl-endpoint
        FRONTEGG_CUSTOM_DOMAIN_CLOUDFLARE_TRANSFORM_RULE_SET_ID: custom-domain-cloudflare-transform-rule-set-id
        FRONTEGG_CUSTOM_DOMAIN_CLOUDFLARE_ORIGIN_RULE_SET_ID: custom-domain-cloudflare-origin-rule-set-id
        FRONTEGG_VENDOR_HOST: frontegg-vendor-host
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_CDN_URL: cdn-url
        FRONTEGG_AWS_REGION: aws-region
        FRONTEGG_CDN_BUCKET: cdn-bucket

#usage-tracking-service:
#  name: usage-tracking
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: "frontegg/usage-tracking-service"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3023
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3023
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 10
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    nodeSelector:
#      workload: general
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: usage-tracking-service
#      FRONTEGG_USAGE_TRACKING_MYSQL_DB_NAME: frontegg_usage_tracking
#      NODE_ENV: production
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_REDSHIFT_DATABASE: redshift-database-name
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      apiKey: {{ $secret.frontegg.apiKeys.usageTrackingApiKey | toYaml }}
#      splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
#      frontegg:
#        vendorId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#      redshift:
#        host: {{ $secret.databases.redshift.host | toYaml }}
#        user: {{ $secret.databases.redshift.userName | toYaml }}
#        password: {{ $secret.databases.redshift.password | toYaml }}
#      mysql:
#        hostname: {{ $secret.databases.generalMysql.host | toYaml }}
#        username: {{ $secret.databases.generalMysql.username | toYaml }}
#        password: {{ $secret.databases.generalMysql.password | toYaml }}
#    additionalSecrets: ""
#
#  cronjobs:
#    refresh:
#      enabled: true
#      command: ["npm"]
#      args: ["run", "full-cronjob"]
#      schedule: "0 * * * *"
#      resources:
#        requests:
#          cpu: 500m
#          memory: 500Mi
#      ttlSecondsAfterFinished: 600
#      concurrencyPolicy: Replace
#      failedJobsHistoryLimit: 1
#      successfulJobsHistoryLimit: 1
#      restartPolicy: Never
#
#tenants-service:
#  name: tenants
#  team: tamago
#
#  envID: local
#
#  image:
#    repository: frontegg/tenants-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    resources:
#      requests:
#        cpu: 1
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3015
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3015
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 3
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    livenessProbe:
#      failureThreshold: 3
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 40
#      periodSeconds: 60
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    labels:
#      scrape-for-metrics: enabled
#    podAnnotations:
#      linkerd.io/inject: enabled
#    replicaCount: 1
#    nodeSelector:
#      workload: general
#    service:
#      ports:
#        - port: 80
#          targetPort: 3015
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3015
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#    livenessProbe:
#      failureThreshold: 5
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 60
#      periodSeconds: 60
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 300m
#            memory: 500Mi
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_ANALYTICS_TYPE: firehose
#      LOG_LEVEL: verbose
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
#        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_TENANT_ASSETS_S3_BUCKET: tenant-assets-s3-bucket
#        FRONTEGG_TENANTS_SERVICE_MYSQL_DB_NAME: tenants-service-mysql-db-name
#        FRONTEGG_USAGE_REPORTING_KAFKA_TOPIC_NAME: tenants-usage-reporting-topic-name
#        FRONTEGG_TENANTS_SERVICE_REDIS_DB_INDEX: tenants-redis-db-index
#        FRONTEGG_USE_FIREHOSE_ANALYTICS: use-firehose-analytics
#        FRONTEGG_TENANT_ASSETS_S3_ENDPOINT: tenant-assets-s3-endpoint
#        FRONTEGG_AWS_ENDPOINT: tenant-assets-s3-aws-endpoint
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#
#      database:
#        mongo:
#          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
#        sql:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#      analytics:
#        firehose:
#          awsRegion: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
#          awsAccessKey: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
#          awsSecretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
#      cloudflare:
#        cdn:
#          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
#          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
#
#    additionalSecrets: ""
#
#subscriptions-service:
#  name: subscriptions
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/subscriptions-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3017
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3017
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 20
#    nodeSelector:
#      workload: general
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: subscriptions-service
#      NODE_ENV: production
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_KAFKA_STRIPE_WEBHOOKS_TOPIC_NAME: stripe-webhooks-v1
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_ENCRYPT_ALGORITHM: aes-256-cbc
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_DB_NAME: frontegg_subscriptions
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_CONFIG_FILE_PATH: /etc/config/config.env
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
#        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
#        FRONTEGG_API_GATEWAY_URL: api-gateway-url
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_REGION: stripe-region
#        FRONTEGG_DEFAULT_REGION: default-stripe-region
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.subscriptionsServiceApiKey | toYaml }}
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
#      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
#      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_SUBSCRIPTIONS_SERVICE_ENCRYPT_SECRET_KEY={{ $secret.frontegg.applications.subscriptions.encryptSecretKey | toYaml }}
#      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
#      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#    additionalSecrets: ""
#
#security-engines:
#  name: security-engines
#  team: adoption
#  repoName: security-engines
#
#  envID: local
#
#  image:
#    repository: "frontegg/security-engines"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3032
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3032
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 60
#      targetMemoryUtilizationPercentage: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3032
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3032
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#  #    httpGet:
#  #      path: /health
#  #      port: http
#  #    initialDelaySeconds: 30
#  #    periodSeconds: 20
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configmap:
#    data:
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: security-engines
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      MIGRATION_DIR_PATH: ./dist/migrations
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#      SENTRY_ENABLED: "true"
#      SENTRY_DSN: "https://df4e77306fe836ca17283337bab8570a@o362363.ingest.us.sentry.io/4507877559697408"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ENV_ID: env-id
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#        FRONTEGG_ANOMALY_DETECTION_SERVICE_URL: anomaly-detection-url
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      apiKey: {{ $secret.frontegg.apiKeys.securityEnginesApiKey | toYaml }}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#      databases:
#        mysql:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#      encryption:
#        secret: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
#      ipStack:
#        accessKey: {{ $secret.frontegg.xxx.ipStackApiKey | toYaml }}
#      ipData:
#        apiKey: {{ $secret.frontegg.xxx.ipDataApiKey | toYaml }}
#      ipqs:
#        apiKey: {{ $secret.externalServices.ipqs.apiKey | toYaml }}
#      zeroBounce:
#        apiKey: {{ $secret.externalServices.zeroBounce.apiKey | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#      cloudflare:
#        cdn:
#          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
#          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
#
#    additionalSecrets: ""
#
#security-center-service:
#  name: security-center
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: "frontegg/security-center-service"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3033
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3033
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 60
#      targetMemoryUtilizationPercentage: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3033
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3033
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configmap:
#    data:
#      NODE_ENV: production
#      LOG_LEVEL: verbose
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: security-center-service
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.securityCenterServiceApiKey | toYaml }}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#
#      databases:
#        mongo:
#          uri: {{ $secret.databases.mongo6.connectionString | toYaml }}
#
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#
#      ipStack:
#        accessKey: {{ $secret.frontegg.xxx.ipStackApiKey | toYaml }}
#      ipData:
#        apiKey: {{ $secret.frontegg.xxx.ipDataApiKey | toYaml }}
#
#    additionalSecrets: ""
#
#prehook-service:
#  name: prehooks
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/prehook-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    podAnnotations:
#      config.linkerd.io/skip-outbound-ports: "8080"
#    service:
#      ports:
#        - port: 80
#          targetPort: 3021
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3021
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: prehook-service
#      NODE_ENV: production
#      FRONTEGG_PREHOOK_TIMEOUT: "5000"
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_CONFIG_FILE_PATH: /etc/config/config.env
#      FRONTEGG_HTTP_CLIENT_PROXY_ENABLED: "true"
#      NODE_NO_WARNINGS: "1"
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 250m
#            memory: 500Mi
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
#        FRONTEGG_HTTP_CLIENT_PROXY_HOST: frontegg-proxy-host
#        FRONTEGG_HTTP_CLIENT_PROXY_PORT: frontegg-proxy-port
#        FRONTEGG_HTTP_CLIENT_PROXY_PROTO: frontegg-proxy-protocol
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_PREHOOK_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.prehookApiKey | toYaml }}
#      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      FRONTEGG_PREHOOK_SERVICE_DB_URL={{ $secret.databases.mongo.connectionString | toYaml }}
#      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
#      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_CUSTOM_CODE_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
#    additionalSecrets: ""
#
#nlp-execution-assistant:
#  name: nlp-execution-assistant
#  team: adoption
#  envID: local
#
#  image:
#    repository: frontegg/nlp-execution-assistant
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/nodejs/bin/node"]
#    args: ["./dist/deployments/service/main"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3037
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3037
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 60
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      failureThreshold: 3
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#    startupProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 10
#      periodSeconds: 10
#      failureThreshold: 5
#
#  hp:
#    enabled: false
#
#  worker:
#    enabled: false
#
#  configmap:
#    data:
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: nlp-execution-assistant
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
#      FRONTEGG_FLOWS_AI_MODEL_NAME: "ft:gpt-4o-2024-08-06:frontegg-ltd:flows-v1-1:AIIzRBSj"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.nlpExecutionAssistantApiKey | toYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#      openAI:
#        key: {{ $secret.externalServices.openAI.key | toYaml }}
#      databases:
#        mongo:
#          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
#
#    additionalSecrets: ""
#
#  serviceProfile:
#    routes: []
#
#metadata-service:
#  name: metadata
#  team: tamago
#
#  envID: local
#
#  image:
#    repository: frontegg/metadata-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3005
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3005
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 3
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      FRONTEGG_PORT: "3005"
#      FRONTEGG_SERVICE_NAME: metadata-service
#      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
#      FRONTEGG_JAEGER_ENABLED: "true"
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
#        FRONTEGG_METADATA_SERVICE_TOPIC_NAME: metadata-service-topic-name
#        FRONTEGG_METADATA_SERVICE_DB_CONNECTION_TIMEOUT_MS: metadata-service-db-connection-timeout-ms
#        FRONTEGG_METADATA_SERVICE_DB_CONNECTION_RETRY_ATTEMPTS: metadata-service-db-connection-retry-attempts
#        FRONTEGG_METADATA_SERVICE_DB_CONNECTION_RETRY_DELAY: metadata-service-db-connection-retry-delay
#        FRONTEGG_METADATA_SERVICE_IP_STACK_URL: metadata-service-ip-stack-url
#        FRONTEGG_METADATA_SERVICE_REDIS_DB_INDEX: metadata-service-redis-db-index
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_CDN_URL: cdn-url
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
#      FRONTEGG_SPLIT_IO_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_SPLIT_IO_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_SPLIT_IO_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#      FRONTEGG_METADATA_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
#      FRONTEGG_METADATA_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_METADATA_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_METADATA_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
#      FRONTEGG_METADATA_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#      FRONTEGG_METADATA_SERVICE_DB_URL={{ $secret.databases.mongo.connectionString | toYaml }}
#      FRONTEGG_METADATA_SERVICE_IP_STACK_API_KEY={{ $secret.frontegg.xxx.ipStackApiKey | toYaml }}
#      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
#      FRONTEGG_CLOUDFLARE_PURGE_CACHE_ZONE_ID={{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
#      FRONTEGG_CLOUDFLARE_PURGE_CACHE_TOKEN={{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
#      FRONTEGG_IP_DATA_API_KEY={{ $secret.frontegg.xxx.ipDataApiKey | toYaml }}
#
#    additionalSecrets: ""
#
#logs-streaming-service:
#  name: log-stream
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: "frontegg/logs-streaming-service"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    service:
#      labels:
#        monitoring-metrics: enabled
#      ports:
#        - port: 80
#          targetPort: 3030
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3030
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 60
#      targetMemoryUtilizationPercentage: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#    tolerations: []
#    affinity: {}
#
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    service:
#      labels:
#        monitoring-metrics: enabled
#      ports:
#        - port: 80
#          targetPort: 3030
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3030
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe: {}
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configmap:
#    data:
#      NODE_ENV: production
#      NODE_OPTIONS: "--no-warnings"
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: logs-streaming-service
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_EXPORTERS_DEPLOYMENT_NAMESPACE: log-streaming
#      FRONTEGG_EXPORTERS_DEPLOYMENT_SERVICE_ACCOUNT_NAME: '{{ include "name" $ }}'
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#      FRONTEGG_EXPORTERS_DEPLOYMENT_IMAGE_PULL_SECRETS: regcred-v2
#      FRONTEGG_EXPORTERS_SCALING_COOLDOWN_PERIOD: "90"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.logsStreamingServiceApiKey | toYaml }}
#      splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#      databases:
#        mysql:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#      encryption:
#        key: {{ $secret.frontegg.applications.logsStreaming.cryptoKey | toYaml }}
#    additionalSecrets: ""
#
#  additionalResources: |
#    ---
#    apiVersion: v1
#    kind: Namespace
#    metadata:
#      annotations:
#        argocd.argoproj.io/sync-options: Delete=false
#      name: log-streaming
#    ---
#    apiVersion: external-secrets.io/v1beta1
#    kind: ExternalSecret
#    metadata:
#      name: {{ include "fullname" $ }}-regcred
#      namespace: log-streaming
#    spec:
#      refreshInterval: 1m
#      secretStoreRef:
#        name: external-secret-store
#        kind: ClusterSecretStore
#      target:
#        name: regcred-v2
#        template:
#          type: kubernetes.io/dockerconfigjson
#          engineVersion: v2
#          data:
#            .dockerconfigjson: |
#              {{`{{- $secret := .contents | fromYaml }}
#              {"auths": {
#                "{{ $secret.externalServices.regCred.url | toYaml }}": {
#                  "username": "{{ $secret.externalServices.regCred.username | toYaml }}",
#                  "password": "{{ $secret.externalServices.regCred.password | toYaml }}",
#                  "email": "{{ $secret.externalServices.regCred.email | toYaml }}",
#                  "auth": "{{ $secret.externalServices.regCred.auth | toYaml }}"
#                }
#              }}`}}
#      data:
#        - secretKey: contents
#          remoteRef:
#            key: {{ .Values.envID }}
#
#  role:
#    enabled: true
#    kind: Role
#    namespace: "log-streaming"
#    rules:
#      - apiGroups: ["*"]
#        resources: ["*"]
#        verbs: ["*"]
#
#  rolebinding:
#    enabled: true
#    namespace: "log-streaming"
#
#logs-service:
#  name: logs
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: "frontegg/logs-service"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    env:
#      - name: FRONTEGG_LOGS_SERVICE_OFFLINE_PROCESS
#        value: "false"
#    service:
#      ports:
#        - port: 80
#          targetPort: 3029
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3029
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    env:
#      - name: FRONTEGG_LOGS_SERVICE_OFFLINE_PROCESS
#        value: "true"
#    service:
#      ports:
#        - port: 80
#          targetPort: 3029
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3029
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#
#  cronjobs:
#    retention-enforcement:
#      resources:
#        requests:
#          cpu: 500m
#          memory: 500Mi
#      enabled: true
#      schedule: "@hourly"
#      ttlSecondsAfterFinished: 600
#      concurrencyPolicy: Forbid
#      failedJobsHistoryLimit: 4
#      successfulJobsHistoryLimit: 4
#      restartPolicy: Never
#      command: ["/bin/bash"]
#      args: ["entrypoint.sh", "command", "enforce-retention"]
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configmap:
#    data:
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: logs-service
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_FEATURE_RETENTION_FEATURE_FLAG_NAME: "logs-retention"
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_BACKOFFICE_URL: backoffice-service-url
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.logsServiceApiKey | toYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#      databases:
#        mongo:
#          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
#      internalServices:
#        backoffice:
#          apiKey: {{ $secret.frontegg.apiKeys.backofficeApiKey | toYaml }}
#      splitIO:
#        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
#    additionalSecrets: ""
#
#forward-proxy:
#  name: forward-proxy
#  team: platform
#
#  envID: local
#
#  image:
#    repository: frontegg/forward-proxy
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/server"]
#    args: []
#    additionalVolumes: |
#      - name: vol-config
#        configMap:
#          name: '{{ include "fullname" $ }}-config'
#      - name: vol-acl
#        configMap:
#          name: '{{ include "fullname" $ }}-acl'
#    additionalVolumeMounts: |
#      - name: vol-acl
#        mountPath: /etc/smokescreen/acl.yaml
#        subPath: acl.yaml
#      - name: vol-config
#        mountPath: /etc/smokescreen/config.yaml
#        subPath: config.yaml
#    service:
#      scrape: false
#      labels:
#        monitoring-port: metrics
#      ports:
#        - name: http
#          port: 8080
#          protocol: TCP
#          targetPort: 4750
#        - name: metrics
#          port: 9090
#          protocol: TCP
#          targetPort: 9090
#    ports:
#      - name: http
#        containerPort: 4750
#      - name: metrics
#        containerPort: 9090
#    resources:
#      requests:
#        cpu: 500m
#        memory: 512Mi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 3
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    nodeSelector:
#      workload: general
#    readinessProbe:
#      httpGet:
#        path: /healthcheck
#        port: 4750
#      initialDelaySeconds: 40
#      periodSeconds: 5
#      failureThreshold: 1
#    livenessProbe:
#      httpGet:
#        path: /healthcheck
#        port: 4750
#      initialDelaySeconds: 40
#      periodSeconds: 20
#    startupProbe:
#      httpGet:
#        path: /healthcheck
#        port: http
#      initialDelaySeconds: 10
#      periodSeconds: 10
#      failureThreshold: 5
#    terminationGracePeriodSeconds: 60
#
#  configmap:
#    data:
#
#  configuration:
#    map:
#      config-center:
#
#  externalSecret:
#    enabled: false
#
#  additionalResources: |
#    ---
#    kind: ConfigMap
#    apiVersion: v1
#    metadata:
#      annotations:
#        argocd.argoproj.io/sync-wave: "-100"
#        argocd.argoproj.io/sync-options: Force=true,Replace=true
#      name: {{ include "fullname" $ }}-acl
#      labels:
#        {{- include "labels" $ | nindent 4 }}
#    data:
#      acl.yaml: |
#        ---
#        version: v1
#        services:
#          - name: test-trusted-srv
#            project: security
#            action: report
#            allowed_domains:
#              - frontegg.com
#
#        default:
#          project: other
#          action: report
#          allowed_domains:
#            - test.com
#
#        global_allow_list:
#          - google.com
#
#        global_deny_list:
#          - 127.0.0.1
#    ---
#    kind: ConfigMap
#    apiVersion: v1
#    metadata:
#      annotations:
#        argocd.argoproj.io/sync-wave: "-100"
#        argocd.argoproj.io/sync-options: Force=true,Replace=true
#      name: {{ include "fullname" $ }}-config
#      labels:
#        {{- include "labels" $ | nindent 4 }}
#    data:
#      config.yaml: |
#        ---
#        allow_missing_role: true # skip mTLS client validation
#        unsafe_allow_private_ranges: false
#
#
#event-service:
#  name: events
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/event-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    resources:
#      requests:
#        cpu: 1000m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3011
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3011
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 20
#    nodeSelector:
#      workload: general
#    serviceProfile:
#      enabled: true
#      routes:
#        - condition:
#            method: POST
#            pathRegex: resources/data-sync/v1/event-config/v1/
#          name: POST resources/data-sync/v1/event-config/v1/
#        - condition:
#            method: POST
#            pathRegex: /resources/triggers/v1
#          name: POST /resources/triggers/v1
#        - condition:
#            method: POST
#            pathRegex: resources/triggers/v2
#          name: POST resources/triggers/v2
#        - condition:
#            method: POST
#            pathRegex: /resources/triggers/v3/
#          name: POST /resources/triggers/v3/
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      NODE_OPTIONS: "--no-warnings"
#      PORT: "3011"
#      LOG_LEVEL: 'verbose'
#      FRONTEGG_SERVICE_NAME: event-service
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#      FRONTEGG_CHANNEL_AUDIT_TOPIC_PARTITIONS_NUM: "10"
#      FRONTEGG_CHANNEL_WEBHOOK_TOPIC_PARTITIONS_NUM: "40"
#      FRONTEGG_EVENTS_SERVICE_EVENTS_CONSUMER_TOPIC_PARTITIONS_NUM: "10"
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_EVENTS_SERVICE_REDIS_DB_INDEX: events-service-redis-db-index
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_ENV_ID: env-id
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#      databases:
#        mysql:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#        mysql_event_retry:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#      splitIO:
#        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
#    additionalSecrets: ""

env-duplicator:
  name: env-duplicator
  team: frontegg
  envID: *envId
  appVersion: master-latest
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/env-duplicator
    prefix: *imagePrefix
  imagePullPolicy: Always
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    service:
      ports:
        - port: 80
          targetPort: 3022
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3022
    resources:
      requests:
        cpu: 250m
        memory: 1Gi
      limits:
        memory: 1Gi
    livenessProbe:
      httpGet:
        path: /health/liveness
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 5
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80

  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: env-duplicator
      NODE_ENV: production
      FRONTEGG_ENV_DUPLICATOR_DB_NAME: frontegg_env_duplicator
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: /etc/config

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_DUPLICATOR_VENDOR_URL: vendors-service-url
        FRONTEGG_ENV_DUPLICATOR_IDENTITY_URL: identity-service-url
        FRONTEGG_ENV_DUPLICATOR_OAUTH_URL: oauth-service-url
        FRONTEGG_ENV_DUPLICATOR_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_ENV_DUPLICATOR_METADATA_URL: metadata-service-url
        FRONTEGG_ENV_DUPLICATOR_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_ENV_DUPLICATOR_DB_NAME: env-duplicator-mysql-db-name
        FRONTEGG_ENV_DUPLICATOR_COPY_RESULTS_TOPIC: env-duplicator-configuration-copy-result-topic-name
        FRONTEGG_ENV_DUPLICATOR_COPY_TOPIC: env-duplicator-configuration-copy-topic-name

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.envDuplicatorApiKey | toYaml }}
      splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
      vendorServiceApiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      oauthService:
        apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
      eventsService:
        apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      identityService:
        apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      teamManagementService:
        apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      metadataService:
        apiKey: {{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      database:
        host: {{ $secret.databases.generalMysql.host | toYaml }}
        username: {{ $secret.databases.generalMysql.username | toYaml }}
        password: {{ $secret.databases.generalMysql.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}

    additionalSecrets: ""

#entitlements-service:
#  name: entitlements
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: "frontegg/entitlements-service"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3031
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3031
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 60
#      targetMemoryUtilizationPercentage: 60
#        enabled: true
#        annotations:
#          scaledobject.keda.sh/transfer-hpa-ownership: "true"
#          validations.keda.sh/hpa-ownership: "false"
#        triggers:
#          - type: cpu
#            metadata:
#              type: Utilization
#              value: "80"
#          - type: memory
#            metadata:
#              type: Utilization
#              value: "75"
#          - type: prometheus
#            name: P90 latency
#            metadata:
#              serverAddress: http://vmselect-vm.observability.svc.cluster.local:8481/select/0/prometheus
#              query: max(histogram_quantile(0.90, sum(rate(route_response_latency_ms_bucket{direction="inbound",namespace="frontegg", pod=~"entitlements-v2-web.*"}[1m]) ) by (le, pod)))
#              threshold: "1000"
#          - type: prometheus
#            name: eventloop lag
#            metadata:
#              serverAddress: http://vmselect-vm.observability.svc.cluster.local:8481/select/0/prometheus
#              query: sum(nodejs_eventloop_lag_seconds{pod=~"entitlements-v2-web.*"})
#              threshold: "1"
#          - type: prometheus
#            name: active handlers
#            metadata:
#              serverAddress: http://vmselect-vm.observability.svc.cluster.local:8481/select/0/prometheus
#              query: max(nodejs_active_handles_total{pod=~"entitlements-v2-web.*"}[5m])
#              threshold: "750"
#        advanced:
#          horizontalPodAutoscalerConfig: # Optional. Section to specify HPA related options
#            name: '{{ include "web.name" $ }}'
#            behavior:
#              scaleDown:
#                stabilizationWindowSeconds: 300
#                policies:
#                  - type: Pods
#                    value: 1
#                    periodSeconds: 60
#              scaleUp:
#                stabilizationWindowSeconds: 0
#                policies:
#                  - type: Pods
#                    value: 3
#                    periodSeconds: 10
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3031
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3031
#    nodeSelector:
#      workload: general
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 4
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#        enabled: true
#        annotations:
#          scaledobject.keda.sh/transfer-hpa-ownership: "true"
#          validations.keda.sh/hpa-ownership: "false"
#        triggers:
#          - type: cpu
#            metadata:
#              type: Utilization
#              value: "80"
#          - type: memory
#            metadata:
#              type: Utilization
#              value: "75"
#          - type: prometheus
#            name: kafka time lag
#            metadata:
#              serverAddress: http://vmselect-vm.observability.svc.cluster.local:8481/select/0/prometheus
#              query: max(sum(aws_kafka_estimated_max_time_lag_maximum{dimension_Consumer_Group=~".*entitlements-service-.*" }) by (dimension_Consumer_Group))
#              threshold: "50"
#        advanced:
#          horizontalPodAutoscalerConfig: # Optional. Section to specify HPA related options
#            name: '{{ include "worker.name" $ }}'
#            behavior:
#              scaleDown:
#                stabilizationWindowSeconds: 300
#                policies:
#                  - type: Pods
#                    value: 1
#                    periodSeconds: 60
#              scaleUp:
#                stabilizationWindowSeconds: 0
#                policies:
#                  - type: Percent
#                    value: 100
#                    periodSeconds: 15
#                  - type: Pods
#                    value: 1
#                    periodSeconds: 15
#                selectPolicy: Max
#    resources:
#      requests:
#        cpu: 1000m
#        memory: 2Gi
#      limits:
#        memory: 2Gi
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#    plans:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["./run-plans.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configmap:
#    data:
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: entitlements-service
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      MIGRATION_DIR_PATH: dist/migrations
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_ENTITLEMENTS_SERVICE_REDIS_DB_INDEX: entitlements-redis-db-index
#        FRONTEGG_ENTITLEMENTS_SERVICE_VENDOR_SNAPSHOT_JOB_DELAY: entitlements-vendor-snapshot-job-delay-ms
#        FRONTEGG_ENTITLEMENTS_SERVICE_VENDOR_SNAPSHOT_JOB_ATTEMPTS: entitlements-vendor-snapshot-job-attempts
#        FRONTEGG_ENTITLEMENTS_SERVICE_AWS_REGION: aws-region
#        FRONTEGG_ENTITLEMENTS_SERVICE_AWS_S3_BUCKETS_OPA_POLICIES: entitlements-service-s3-opa-policy-bucket
#        FRONTEGG_ENTITLEMENTS_SERVICE_LEGACY_VENDORS_PLAN_IDS: entitlements-service-legacy-vendors-plan-ids
#        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
#        FRONTEGG_IDENTITY_SERVICE_P1_URL: identity-p1-service-url
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.entitlementsServiceApiKey | toYaml }}
#      splitIO:
#        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#      internalServices:
#        identityP1:
#          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#        identity:
#          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#      databases:
#        mysql:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#    additionalSecrets: ""
#
directory-service:
  name: directory
  team: frontegg
  envID: *envId
  appVersion: master-latest
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: "frontegg/directory-service"
    prefix: *imagePrefix
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3027
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3027
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    tolerations: []
    affinity: {}

  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    env:
      - name: FRONTEGG_DIRECTORY_SERVICE_OFFLINE_PROCESS
        value: "true"
    service:
      ports:
        - port: 80
          targetPort: 3027
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3027
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configmap:
    data:
      NODE_ENV: production
      LOG_LEVEL: verbose
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: directory-service
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config

  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.directoryServiceApiKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
        redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mongo:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
      encryption:
        secret: {{ $secret.frontegg.applications.directory.directoryServiceEncryptionKey | toYaml }}
    additionalSecrets: ""

#dashboard:
#  name: dashboard
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/dashboard
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/sh"]
#    args: ["./entrypoint.sh"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 8080
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 8080
#    resources:
#      requests:
#        cpu: 500m
#        memory: 300Mi
#      limits:
#        memory: 500Mi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 5
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 20
#
#  configmap:
#    data:
#      ALLOWED_IPS: "*"
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      REACT_APP_FRONTEGG_PRICING_URL: dev
#      REACT_APP_FRONTEGG_PRICING_TEMPLATE_ID: dev
#      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
#      # Based on entitlements.plans-migration
#      FRONTEGG_FREEMIUM_PLAN_ID: 6d239555-9565-4203-8df6-93fbf8646acf
#      FRONTEGG_TRIAL_PLAN_ID: 45c572c1-15ed-4ffd-ab28-c9a6449ecebc
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ENV_ID: env-id
#        PUBLIC_URL: portal-url
#        CORS_ORIGIN: cors-origin
#        FRONTEGG_API_GATEWAY_URL: api-gateway-url
#        FRONTEGG_LEGACY_DASHBOARD_URL: portal-v1-url
#        FRONTEGG_CDN_URL: dashboard-cdn-url
#        FRONTEGG_DEVREV_API_BASE_URL: devrev-api-url
#        FRONTEGG_VENDOR_HOST: frontegg-vendor-host
#        FRONTEGG_CDN_BUCKET: cdn-bucket #staging-group-dashboard-static-content
#        FRONTEGG_HUBSPOT_ENABLED: dashboard-hubspot-enabled
#        FRONTEGG_DEVREV_ENABLED: dashboard-devrev-enabled
#        FRONTEGG_DOMAIN_SUFFIX: dashboard-domain-suffix
#        REACT_APP_FRONTEGG_PRICING_URL: react-app-frontegg-pricing-url
#        REACT_APP_FRONTEGG_PRICING_TEMPLATE_ID: react-app-frontegg-pricing-template-id
#        FRONTEGG_BACKOFFICE_VIEWER_ROLE_ID: backoffice-viewer-role-id
#        FRONTEGG_BACKOFFICE_EDITOR_ROLE_ID: backoffice-editor-role-id
#        FRONTEGG_UI_EVENTS_URL: frontegg-ui-events-url
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      SPLIT_CLIENT_ID={{ $secret.externalServices.split.clientId | toYaml }}
#      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      FRONTEGG_API_KEY={{ $secret.frontegg.xxx.fronteggApiKey | toYaml }}
#      FRONTEGG_AUTH_PUBLIC_KEY={{ $secret.frontegg.applications.identity.publicKey | toYaml }}
#      SENTRY_DSN={{ $secret.externalServices.sentry.dsn | toYaml }}
#      GITBOOK_AUTH_TOKEN={{ $secret.externalServices.gitbook.authToken | toYaml }}
#      FRONTEGG_HUBSPOT_ACCESS_TOKEN={{ $secret.externalServices.hubspot.accessToken | toYaml }}
#      FRONTEGG_DEVREV_AAT={{ $secret.externalServices.devrev.accessToken | toYaml }}
#      FRONTEGG_HUBSPOT_FORM_ID={{ $secret.externalServices.hubspot.formId | toYaml }}
#      FRONTEGG_HUBSPOT_PORTAL_ID={{ $secret.externalServices.hubspot.portalId | toYaml }}
#    additionalSecrets: ""
#
#  cronjobs:
#    restart:
#      enabled: false
#      name: dashboard-deplopyment-restart
#      role: '{{ include "name" $ }}'
#      roleBinding: '{{ include "name" $ }}'
#      schedule: "0 0 * * *"
#      image: bitnami/kubectl
#      command:
#        - bash
#        - -c
#        - >-
#          kubectl rollout restart deployment/{{ include "web.name" $ }} &&
#          kubectl rollout status deployment/{{ include "web.name" $ }}
#
#  jobs:
#    upload-assets:
#      enabled: true
#      spec:
#        command: ["/bin/sh"]
#        args: ["./s3-assets-upload.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  prometheusRule:
#    enabled: true
#    namespace: observability
#    labels:
#      release: prometheus
#    rpsAlertLimit: 50
#    rules:
#      - alert: DashboardRequestRateIsTooHigh
#        expr: |
#          round(sum(irate(nginx_ingress_controller_requests{ingress="{{ include "name" . }}-tesla"}[2m])) , 0.001) > {{ .Values.prometheusRule.rpsAlertLimit }}
#        for: 1m
#        labels:
#          severity: critical
#        annotations:
#          description: Dashboard RPS is higher then {{ .Values.prometheusRule.rpsAlertLimit }} for 2 minutes or more
#          summary: Dashboard RPS is higher than {{ .Values.prometheusRule.rpsAlertLimit }}
#
#  serviceAccount:
#    enabled: true
#
#  additionalTemplates: |
#    ---
#    apiVersion: rbac.authorization.k8s.io/v1
#    kind: Role
#    metadata:
#      name: {{ include "name" $ }}
#      labels:
#        {{- include "labels" . | nindent 4 }}
#    rules:
#      - apiGroups: ["apps", "extensions"]
#        resources: ["deployments"]
#        resourceNames: ["{{ include "web.name" $ }}"]
#        verbs: ["get", "patch", "list", "watch"]
#    ---
#    apiVersion: rbac.authorization.k8s.io/v1
#    kind: RoleBinding
#    metadata:
#      name: {{ include "name" $ }}
#      labels:
#        {{- include "labels" . | nindent 4 }}
#    roleRef:
#      apiGroup: rbac.authorization.k8s.io
#      kind: Role
#      name: {{ include "name" $ }}
#    subjects:
#      - kind: ServiceAccount
#        name: {{ include "name" $ }}
#
#  additionalResources: |
#    ---
#    apiVersion: rbac.authorization.k8s.io/v1
#    kind: Role
#    metadata:
#      name: {{ include "name" $ }}
#      labels:
#        {{- include "labels" . | nindent 4 }}
#    rules:
#      - apiGroups: ["apps", "extensions"]
#        resources: ["deployments"]
#        resourceNames: ["{{ include "web.name" $ }}"]
#        verbs: ["get", "patch", "list", "watch"]
#    ---
#    apiVersion: rbac.authorization.k8s.io/v1
#    kind: RoleBinding
#    metadata:
#      name: {{ include "name" $ }}
#      labels:
#        {{- include "labels" . | nindent 4 }}
#    roleRef:
#      apiGroup: rbac.authorization.k8s.io
#      kind: Role
#      name: {{ include "name" $ }}
#    subjects:
#      - kind: ServiceAccount
#        name: {{ include "name" $ }}
#
#
dashboard-env-builder:
  name: dashboard-env-builder
  team: frontegg
  envID: *envId
  appVersion: master-latest
  image:
    repository: frontegg/dashboard-env-builder
    prefix: *imagePrefix
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  web:
    enabled: true
    service:
      ports:
        - port: 80
          targetPort: 3024
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3024
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 5
  configmap:
    data:
      CLOUD_ENVIRONMENT: production
      FRONTEGG_SERVICE_NAME: dashboard-env-builder
      NODE_ENV: production
      FRONTEGG_DASHBOARD_ENV_BUILDER_DB_NAME: frontegg_dashboard_env_builder
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: /etc/config

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_DUPLICATOR_URL: env-duplicator-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_IDENTITY_URL: identity-service-url
        FRONTEGG_IDENTITY_P1_SERVICE_URL: identity-p1-service-url
        FRONTEGG_OAUTH_URL: oauth-service-url
        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_METADATA_URL: metadata-service-url
        FRONTEGG_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_CDN_URL: cdn-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.dahboardEnvBuilderApiKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      database:
        host: {{ $secret.databases.generalMysql.host | toYaml }}
        username: {{ $secret.databases.generalMysql.username | toYaml }}
        password: {{ $secret.databases.generalMysql.password | toYaml }}
        useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
      envDuplicatorService:
        apiKey: {{ $secret.frontegg.apiKeys.envDuplicatorApiKey | toYaml }}
      vendorsService:
        apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      identityService:
        apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      teamManagementService:
        apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      metadataService:
        apiKey: {{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      oauthService:
        apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
      eventsService:
        apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
    additionalSecrets: ""
#
#custom-code-service:
#  name: custom-code
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/custom-code-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3036
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3036
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    livenessProbe:
#      failureThreshold: 3
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 40
#      periodSeconds: 60
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3036
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3036
#    nodeSelector:
#      workload: general
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#    livenessProbe:
#      failureThreshold: 5
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 60
#      periodSeconds: 60
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 300m
#            memory: 500Mi
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#      SENTRY_ENABLED: "true"
#      SENTRY_DSN: "https://f937ac31272a0c754ee68c25204c05f9@o362363.ingest.us.sentry.io/4507905114636288"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ENV_ID: env-id
#        FRONTEGG_CDN_BUCKET: cdn-bucket
#        FRONTEGG_AWS_REGION: aws-region
#        FRONTEGG_CDN_URL: cdn-url
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
#        FRONTEGG_AWS_LAMBDA_MANAGEMENT_ROLE_ARN: custom-code-service-lambda-management-role-arn
#        FRONTEGG_AWS_LAMBDA_EXECUTION_ROLE_ARN: custom-code-service-lambda-execution-role-arn
#        FRONTEGG_AWS_STEP_FUNCTIONS_MANAGEMENT_ROLE_ARN: custom-code-service-lambda-management-role-arn
#        FRONTEGG_AWS_STEP_FUNCTIONS_EXECUTION_ROLE_ARN: custom-code-service-lambda-execution-role-arn
#        FRONTEGG_AWS_LAMBDA_LAYERS: custom-code-service-lambda-layers
#        FRONTEGG_AWS_LAMBDA_ENV_CX_DOMAIN: custom-code-service-lambda-env-cx-domain
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_AWS_LAMBDA_EXECUTION_DEFAULT_POLICIES: custom-code-service-lambda-execution-default-policies
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      apiKey: {{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      databases:
#        mysql:
#          host: {{ $secret.databases.generalMysql.host | toYaml }}
#          username: {{ $secret.databases.generalMysql.username | toYaml }}
#          password: {{ $secret.databases.generalMysql.password | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#      encryption:
#        secret: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
#      aws:
#        lambda:
#          environment:
#            variables:
#              cxApiKey: {{ $secret.frontegg.applications.customCode.lambda.cxApiKey | toYaml }}
#    additionalSecrets: ""
#
#  serviceAccount:
#    enabled: true
#    nameOverride: custom-code-sa
#    annotations:
#      argocd.argoproj.io/sync-options: Delete=false
#
#connectors-worker:
#  name: connectors-worker
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/connectors-worker
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["./entrypoint.sh"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3015
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3015
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 10
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    nodeSelector:
#      workload: general
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      PORT: "3015"
#      FRONTEGG_SERVICE_NAME: connectors-worker
#      FRONTEGG_INTEGRATIONS_SERVICE_URL: http://integrations-v2-web
#      FRONTEGG_TWILIO_SENDER: "+12055578527"
#      FRONTEGG_KAFKA_SLACK_ACTIVATE_RETRY: "true"
#      FRONTEGG_KAFKA_SLACK_ACTIVATE_DLQ: "true"
#      FRONTEGG_KAFKA_EMAIL_ACTIVATE_RETRY: "true"
#      FRONTEGG_KAFKA_EMAIL_ACTIVATE_DLQ: "true"
#      FRONTEGG_KAFKA_SMS_ACTIVATE_RETRY: "true"
#      FRONTEGG_KAFKA_SMS_ACTIVATE_DLQ: "true"
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_CONNECTORS_WORKER_SERVICE_REDIS_DB_INDEX: connectors-worker-service-redis-db-index
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_INTEGRATIONS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.integrationsServiceApiKey | toYaml }}
#      FRONTEGG_KAFKA_SLACK_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SLACK_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_KAFKA_SLACK_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_KAFKA_EMAIL_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_EMAIL_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_KAFKA_EMAIL_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_KAFKA_SMS_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SMS_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_KAFKA_SMS_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_CONNECTORS_WORKER_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_CONNECTORS_WORKER_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#      FRONTEGG_SENDGRID_API_KEY={{ $secret.externalServices.sendgrid.ApiKey | toYaml }}
#      FRONTEGG_TWILIO_TOKEN={{ $secret.externalServices.twilio.token | toYaml }}
#      FRONTEGG_TWILIO_ACCOUNTSID={{ $secret.externalServices.twilio.accountId | toYaml }}
#      FRONTEGG_KAFKA_EVENTS_STATUS_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_EVENTS_STATUS_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_KAFKA_EVENTS_STATUS_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_CONNECTORS_WORKER_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_CONNECTORS_WORKER_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
#    additionalSecrets: ""
#
#backoffice-service:
#  name: backoffice
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/backoffice-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3025
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3025
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 2Gi
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 5
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3025
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3025
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 2Gi
#    livenessProbe:
#    #    httpGet:
#    #      path: /health
#    #      port: http
#    #    initialDelaySeconds: 60
#    #    periodSeconds: 20
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 60
#      periodSeconds: 5
#    nodeSelector:
#      workload: general
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: backoffice-service
#      NODE_ENV: production
#      FRONTEGG_TENANTS_KAFKA_TOPIC_NAME: tenants-v1
#      FRONTEGG_BACKOFFICE_SERVICE_ENCRYPT_ALGORITHM: aes-256-cbc
#      FRONTEGG_BACKOFFICE_SERVICE_DB_NAME: frontegg_backoffice
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      FRONTEGG_CONFIG_FILE_PATH: /etc/config/config.env
#
#  jobs:
#    migrate:
#      enabled: true
#      spec:
#        command: ["/bin/bash"]
#        args: ["run-migrations.sh"]
#        resources:
#          requests:
#            cpu: 500m
#            memory: 500Mi
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
#        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
#        FRONTEGG_REDSHIFT_DATABASE: redshift-database-name
#        FRONTEGG_BACKOFFICE_SERVICE_REDIS_DB_INDEX: backoffice-redis-db-index
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.backofficeApiKey | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
#      FRONTEGG_REDSHIFT_HOSTNAME={{ $secret.databases.redshift.host | toYaml }}
#      FRONTEGG_REDSHIFT_USERNAME={{ $secret.databases.redshift.userName | toYaml }}
#      FRONTEGG_REDSHIFT_PASSWORD={{ $secret.databases.redshift.password | toYaml }}
#      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
#      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_BACKOFFICE_SERVICE_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
#
#    additionalSecrets: ""
#
#  cronjobs:
#    aggregate-uav:
#      enabled: true
#      command: ["npm"]
#      args: ["run", "aggregate-users-accounts-visits"]
#      schedule: "0 0 * * *"
#      resources:
#        requests:
#          cpu: 500m
#          memory: 500Mi
#      ttlSecondsAfterFinished: 86400
#      concurrencyPolicy: Forbid
#      failedJobsHistoryLimit: 3
#      successfulJobsHistoryLimit: 3
#      restartPolicy: Never
#    aggregate-av:
#      enabled: true
#      command: ["npm"]
#      args: ["run", "aggregate-accounts-visits"]
#      schedule: "0 0 * * *"
#      resources:
#        requests:
#          cpu: 500m
#          memory: 500Mi
#      ttlSecondsAfterFinished: 86400
#      concurrencyPolicy: Forbid
#      failedJobsHistoryLimit: 3
#      successfulJobsHistoryLimit: 3
#      restartPolicy: Never
#
#audits-service:
#  name: audits
#  team: adoption
#
#  envID: local
#
#  image:
#    repository: frontegg/audits-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    service:
#      ports:
#        - port: 80
#          targetPort: 3002
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3002
#    resources:
#      requests:
#        cpu: 512m
#        memory: 2Gi
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      FRONTEGG_SERVICE_NAME: audits-service
#      FRONTEGG_HYBRID_MODE: "false"
#      FRONTEGG_JAEGER_ENABLED: "true"
#      FRONTEGG_ANALYTICS_TYPE: firehose
#      FRONTEGG_USE_FIREHOSE_ANALYTICS: "true"
#      FRONTEGG_PORT: "3002"
#      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
#      LOG_LEVEL: verbose
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_METADATA_SERVICE_URL: metadata-service-url
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_AUDITS_TOPIC_NAME: audits-topic-name
#        FRONTEGG_AUDITS_DB_TYPE: audits-db-type
#        FRONTEGG_AUDITS_DB_NAME: audits-db-name
#        FRONTEGG_METADATA_SERVICE_FETCH_PUBSUB_STRATEGY: metadata-service-fetch-pubsub-strategy
#        FRONTEGG_METADATA_SERVICE_TOPIC_NAME: metadata-service-topic-name
#        FRONTEGG_AUDITS_SERVICE_REDIS_DB_INDEX: audits-service-redis-db-index
#        FRONTEGG_AUDITS_KAFKA_RETRY_COUNT: audits-kafka-retry-count
#        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
#        FRONTEGG_ENV_ID: env-id
#        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_AUDITS_MYSQL_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
#      FRONTEGG_AUDITS_MYSQL_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
#      FRONTEGG_AUDITS_MYSQL_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
#      FRONTEGG_AUDITS_MYSQL_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
#      FRONTEGG_AUDITS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.auditsServiceApiKey | toYaml }}
#      FRONTEGG_METADATA_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
#      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_AUDITS_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
#      FRONTEGG_AUDITS_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
#      FRONTEGG_AUDITS_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
#      FRONTEGG_AUDITS_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
#      FRONTEGG_AUDITS_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
#      FRONTEGG_AUDITS_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
#      FRONTEGG_AUDITS_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
#      FRONTEGG_AUDITS_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
#      FRONTEGG_METADATA_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_METADATA_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_AUDITS_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
#      FRONTEGG_AUDITS_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
#      FRONTEGG_AUDITS_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
#      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
#      FRONTEGG_AUDITS_SERVICE_MONGO_URL={{ $secret.databases.mongo.connectionString | toYaml }}
#      FRONTEGG_FIREHOSE_ACCESS_KEY_ID={{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
#      FRONTEGG_FIREHOSE_SECRET_ACCESS_KEY={{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
#      FRONTEGG_AWS_REGION={{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
#      FRONTEGG_CLIENT_ID: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      FRONTEGG_VENDORS_SERVICE_API_KEY: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
#    additionalSecrets: ""
#
#authentication-service:
#  name: authentication
#  team: core
#
#  envID: local
#
#  replicaCount: 1
#  appVersion: master-latest
#
#  image:
#    repository: frontegg/authentication-service
#    pullPolicy: Always
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    podAnnotations:
#      linkerd.io/inject: enabled
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    livenessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 10
#    readinessProbe:
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 75
#    nodeSelector:
#      agentpool: agentpool
#    tolerations: []
#    affinity: {}
#
#  service:
#    type: ClusterIP
#    port: 80
#    targetPort: 4000
#    protocol: TCP
#    name: http
#
#  configmap:
#    data:
#      CLOUD_ENVIRONMENT: dev
#      NODE_ENV: production
#      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
#        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
#        FRONTEGG_IDENTITY_SERVICE_URL: identity-p1-service-url
#        PORTAL_URL: portal-url
#        FRONTEGG_COOKIE_DOMAIN: authentication-cookie-domain
#        SECURED_COOKIE: authentication-secured-cookie
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.env
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      FRONTEGG_PRIVATE_KEY={{ $secret.frontegg.applications.authentication.authenticationPrivateKey | toYaml }}
#      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
#      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
#      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#      FRONTEGG_AUTH_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.authenticationServiceApiKey | toYaml }}
#    additionalSecrets: ""
#
#auth-hub-service:
#  name: auth-hub
#  team: tamago
#  repoName: auth-hub-service
#
#  envID: local
#
#  image:
#    repository: frontegg/auth-hub-service
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "service"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#      limits:
#        memory: 1Gi
#    service:
#      ports:
#        - port: 80
#          targetPort: 3039
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3039
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    livenessProbe:
#      failureThreshold: 3
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 40
#      periodSeconds: 60
#
#  worker:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh", "worker"]
#    resources:
#      requests:
#        cpu: 500m
#        memory: 1Gi
#    nodeSelector:
#      workload: general
#    service:
#      ports:
#        - port: 80
#          targetPort: 3039
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3039
#    autoscaling:
#      enabled: true
#      minReplicas: 1
#      maxReplicas: 2
#      targetCPUUtilizationPercentage: 50
#      targetMemoryUtilizationPercentage: 50
#    readinessProbe:
#      failureThreshold: 1
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 5
#      periodSeconds: 5
#    livenessProbe:
#      failureThreshold: 5
#      httpGet:
#        path: /health
#        port: http
#      initialDelaySeconds: 60
#      periodSeconds: 60
#
#  configmap:
#    data:
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: auth-hub-service
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      MIGRATION_DIR_PATH: dist/migrations
#      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
#      FRONTEGG_IDENTITY_SERVICE_DB_NAME: frontegg_identity
#      FRONTEGG_USE_FIREHOSE_ANALYTICS: "true"
#      FRONTEGG_ANALYTICS_TYPE: firehose
#      FRONTEGG_TWILIO_SENDER: "+12055578527"
#      FRONTEGG_TWILIO_MESSAGING_SID: "MGf49702aad25a6a99b4acf68ad148af03"
#      SENTRY_ENABLED: "true"
#      SENTRY_DSN: "https://c9776b38a17d57f95286ee1701a8780b@o362363.ingest.sentry.io/4506846259511296"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ENV_ID: env-id
#        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
#        FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
#        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
#        FRONTEGG_API_GW_URL: api-gateway-url
#        FRONTEGG_REPORTS_ENGINE_URL: reports-engine-url
#        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
#        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
#        FRONTEGG_PREHOOK_SERVICE_URL: prehook-service-url
#        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
#        FRONTEGG_EMAIL_SERVICE_URL: email-service-url
#        FRONTEGG_MAX_CONCURRENT_SESSIONS: identity-service-max-concurrent-sessions
#        FRONTEGG_IDENTITY_SERVICE_DB_NAME: identity-service-db-name
#        FRONTEGG_AUDITS_KAFKA_TOPIC_NAME: identity-service-audit-triggered-topic-name
#        FRONTEGG_OAUTH_SERVICE_URL: oauth-service-url
#        FRONTEGG_SECURITY_ENGINES_SERVICE_URL: security-engines-url
#        FRONTEGG_APPLICATIONS_SERVICE_URL: applications-service-url
#        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
#        FRONTEGG_CDN_URL: cdn-url
#        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml }}
#      apiKey: {{ $secret.frontegg.apiKeys.authHubServiceApiKey | toYaml }}
#      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
#      cryptoKey: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
#      cryptoKeyV2: {{ $secret.frontegg.applications.identity.cryptoKeyV2 | toYaml }}
#      sendGrid:
#        apiKey: {{ $secret.externalServices.sendgrid.ApiKey | toYaml }}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#      kafka:
#        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
#        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
#        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
#      databases:
#        mySql:
#          host: {{ $secret.databases.identityMysql.host | toYaml }}
#          username: {{ $secret.databases.identityMysql.username | toYaml }}
#          password: {{ $secret.databases.identityMysql.password | toYaml }}
#          replicaHost: {{ $secret.databases.identityMysql.replicaHost | default "" }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#      sharedCache:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#      internalServices:
#        identityService:
#          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
#        reportsEngine:
#            apiKey: {{ $secret.frontegg.apiKeys.reportsEngineApiKey | toYaml }}
#        teamManagement:
#            apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
#        tenantsService:
#            apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
#        prehookService:
#            apiKey: {{ $secret.frontegg.apiKeys.prehookApiKey | toYaml }}
#        vendorsService:
#            apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
#        emailService:
#            apiKey: {{ $secret.frontegg.apiKeys.emailServiceApiKey | toYaml }}
#        oauthService:
#            apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
#        securityEngines:
#            apiKey: {{ $secret.frontegg.apiKeys.securityEnginesApiKey | toYaml }}
#        applicationsService:
#            apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
#        customCodeService:
#            apiKey: {{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
#      oidc:
#        google:
#          clientId: {{ $secret.frontegg.applications.identity.google.clientId | toYaml }}
#          clientSecret: {{ $secret.frontegg.applications.identity.google.clientSecret | toYaml }}
#        github:
#          clientId: {{ $secret.frontegg.applications.identity.github.clientId | toYaml }}
#          clientSecret: {{ $secret.frontegg.applications.identity.github.clientSecret | toYaml }}
#        microsoft:
#          clientId: {{ $secret.frontegg.applications.identity.microsoft.clientId | toYaml }}
#          clientSecret: {{ $secret.frontegg.applications.identity.microsoft.clientSecret | toYaml }}
#        facebook:
#          clientId: {{ $secret.frontegg.applications.identity.facebook.clientId | toYaml }}
#          clientSecret: {{ $secret.frontegg.applications.identity.facebook.clientSecret | toYaml }}
#        slack:
#          clientId: {{ $secret.frontegg.applications.identity.slack.clientId | toYaml }}
#          clientSecret: {{ $secret.frontegg.applications.identity.slack.clientSecret | toYaml }}
#        apple:
#          clientId: {{ $secret.frontegg.applications.identity.apple.AppleClientId | toYaml }}
#          clientPrivateKey: {{ $secret.frontegg.applications.identity.apple.ApplePrivateKey | trim | toJson }}
#          teamId: {{ $secret.frontegg.applications.identity.apple.AppleTeamId | toYaml }}
#          keyId: {{ $secret.frontegg.applications.identity.apple.AppleKeyId | toYaml }}
#      twilio:
#        token: {{ $secret.externalServices.twilio.token | toYaml }}
#        accountsId: {{ $secret.externalServices.twilio.accountId | toYaml }}
#      session:
#        secret: {{ $secret.frontegg.applications.identity.facebook.SessionSecret | toYaml }}
#      aws:
#        region: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
#        credentials:
#          accessKeyId: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
#          secretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
#      cloudflare:
#        cdn:
#          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
#          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
#
#    additionalSecrets: ""
#
#anomaly-detection:
#  name: anomaly-detection
#  team: core
#
#  envID: local
#
#  image:
#    repository: "frontegg/anomaly-detection"
#
#  imagePullSecrets:
#    - name: regcred
#
#  web:
#    enabled: true
#    command: ["/bin/bash"]
#    args: ["entrypoint.sh"]
#    service:
#      ports:
#        - port: 80
#          targetPort: 3038
#          protocol: TCP
#          name: http
#    ports:
#      - name: http
#        containerPort: 3038
#    resources:
#      requests:
#        cpu: 500m
#        memory: 500Mi
#      limits:
#        memory: 500Mi
#    autoscaling:
#      enabled: true
#      minReplicas: 2
#      maxReplicas: 10
#      targetCPUUtilizationPercentage: 60
#      targetMemoryUtilizationPercentage: 60
#        enabled: false
#        annotations:
#          scaledobject.keda.sh/transfer-hpa-ownership: "true"
#          validations.keda.sh/hpa-ownership: "false"
#        triggers:
#          - type: cpu
#            metadata:
#              type: Utilization
#              value: "50"
#          - type: memory
#            metadata:
#              type: Utilization
#              value: "50"
#        advanced:
#          horizontalPodAutoscalerConfig: # Optional. Section to specify HPA related options
#            name: '{{ include "web.name" $ }}'
#            behavior:
#              scaleDown:
#                stabilizationWindowSeconds: 300
#                policies:
#                  - type: Pods
#                    value: 1
#                    periodSeconds: 60
#              scaleUp:
#                stabilizationWindowSeconds: 0
#                policies:
#                  - type: Pods
#                    value: 1
#                    periodSeconds: 10
#    readinessProbe:
#      httpGet:
#        path: /
#        port: http
#      initialDelaySeconds: 20
#      periodSeconds: 5
#    livenessProbe:
#      httpGet:
#        path: /
#        port: http
#      initialDelaySeconds: 30
#      periodSeconds: 60
#
#  configmap:
#    data:
#      NODE_ENV: production
#      CLOUD_ENVIRONMENT: dev
#      FRONTEGG_SERVICE_NAME: anomaly-detection
#      FRONTEGG_JAEGER_ENABLED: "true"
#      LOG_LEVEL: verbose
#      MIGRATION_DIR_PATH: ./dist/migrations
#      FRONTEGG_CONFIG_DIRECTORY: /etc/config
#      SENTRY_ENABLED: "true"
#      SENTRY_DSN: "https://df4e77306fe836ca17283337bab8570a@o362363.ingest.us.sentry.io/4507877559697408"
#      BUCKET_NAME: "{{ .Values.envID }}-{{ .Values.name }}"
#      S3_KEY_PREFIX: "data/"
#      STORAGE_USE_S3: "True"
#
#  configuration:
#    map:
#      config-center:
#        FRONTEGG_ENV_ID: env-id
#
#  externalSecret:
#    enabled: true
#    mountPath: /etc/config/config.yaml
#    text: |
#      {{- $secret := .contents | fromYaml}}
#      splitIO:
#        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
#        redis:
#          host: {{ $secret.databases.redis.host | toYaml }}
#          port: {{ $secret.databases.redis.port | toYaml }}
#          password: {{ $secret.databases.redis.password | toYaml }}
#      redis:
#        host: {{ $secret.databases.redis.host | toYaml }}
#        password: {{ $secret.databases.redis.password | toYaml }}
#        tls: {{ $secret.databases.redis.tls | toYaml }}
#        port: {{ $secret.databases.redis.port | toYaml }}
#
#    additionalSecrets: ""
#
applications-service:
  name: applications
  team: frontegg
  envID: *envId
  appVersion: master-latest

  argoRollouts:
    enabled: false

  image:
    repository: frontegg/applications-service
    prefix: &imagePrefix 527305576865.dkr.ecr.us-east-1.amazonaws.com/docker-hub/

  defaults: *defaultsAnnotations

  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3035
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3035
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 40
      periodSeconds: 60

  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    replicaCount: 1
    service:
      ports:
        - port: 80
          targetPort: 3035
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3035
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 60
      periodSeconds: 60

  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_SERVICE_NAME: applications-service
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
      NODE_NO_WARNINGS: "1"
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: "false"

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_CDN_BUCKET: cdn-bucket
        FRONTEGG_AWS_REGION: aws-region
        FRONTEGG_CDN_URL: cdn-url
        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      databases:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
        redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
      encryption:
        secret: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
    additionalSecrets: ""

api-gateway:
  name: api-gateway
  team: frontegg
  envID: *envId

  image:
    repository: frontegg/api-gateway
    prefix: *imagePrefix
  appVersion: master-latest

  argoRollouts:
    enabled: false

  defaults: *defaultsAnnotations

  web:
    enabled: true
    command: ["node"]
    args: ["--max-http-header-size=16384", "dist/api-gateway/main"]
    terminationGracePeriodSeconds: 60
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        memory: 2Gi
    service:
      ports:
        - port: 80
          targetPort: 9090
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 9090
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    startupProbe:
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 5

  worker:
    enabled: true
    command: ["node"]
    args: ["--max-http-header-size=16384", "dist/worker/main"]
    labels:
      scrape-for-metrics: enabled
    service:
      ports:
        - port: 80
          targetPort: 9090
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 9090
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    readinessProbe: {}
    livenessProbe: {}
    startupProbe: {}

  configmap:
    data:
      CLOUD_ENVIRONMENT: "production"
      FRONTEGG_METRICS_ENABLED: "false"
      FRONTEGG_JAEGER_ENABLED: "true"
      NODE_ENV: "production"
      LOG_LEVEL: "verbose"
      #SENTRY_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: "false"

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_AUDITS_SERVICE_URL: audits-service-url
        FRONTEGG_AUTHENTICATION_SERVICE_URL: authentication-service-url
        FRONTEGG_METADATA_SERVICE_URL: metadata-service-url
        FRONTEGG_NOTIFICATION_SERVICE_URL: notification-service-url
        FRONTEGG_REPORTS_ENGINE_URL: reports-engine-url
        FRONTEGG_REPORTS_SERVICE_URL: reports-service-url
        FRONTEGG_TEAM_SERVICE_URL: team-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_ENV_DUPLICATOR_URL: env-duplicator-service-url
        FRONTEGG_USAGE_TRACKING_URL: usage-tracking-service-url
        FRONTEGG_TENANT_SERVICE_URL: tenants-service-url
        FRONTEGG_WEBPUSH_SERVICE_URL: webpush-service-url
        FRONTEGG_WEBHOOK_SERVICE_URL: webhook-service-url
        FRONTEGG_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_INTEGRATIONS_SERVICE_URL: integrations-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_IDENTITY_P1_SERVICE_URL: identity-p1-service-url
        FRONTEGG_OAUTH_SERVICE_URL: oauth-service-url
        FRONTEGG_POLICY_SERVICE_URL: policy-service-url
        FRONTEGG_SUBSCRIPTIONS_SERVICE_URL: subscriptions-service-url
        FRONTEGG_PREHOOK_SERVICE_URL: prehook-service-url
        FRONTEGG_DASHBOARD_ENV_BUILDER_URL: dashboard-env-builder-url
        FRONTEGG_BACKOFFICE_SERVICE_URL: backoffice-service-url
        FRONTEGG_PRICING_VIEWS_URL: pricing-views-url
        FRONTEGG_DIRECTORY_SERVICE_URL: directory-service-url
        FRONTEGG_LOGS_SERVICE_URL: logs-service-url
        FRONTEGG_LOGS_STREAMING_SERVICE_URL: logs-streaming-service-url
        FRONTEGG_ENTITLEMENTS_SERVICE_URL: entitlements-service-url
        FRONTEGG_SECURITY_ENGINES_SERVICE_URL: security-engines-url
        FRONTEGG_APPLICATIONS_SERVICE_URL: applications-service-url
        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
        FRONTEGG_SECURITY_CENTER_SERVICE_URL: security-center-service-url
        FRONTEGG_SIGNALS_SERVICE_URL: signals-service-url
        FRONTEGG_AUTH_HUB_URL: auth-hub-service-url
        FRONTEGG_NLP_EXECUTION_ASSISTANT_URL: nlp-execution-assistant-url
        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
        CORS_ORIGINS: cors-origin
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_USAGE_REPORTING_ENABLED: api-gateway-usage-reporting-enabled
        FRONTEGG_USAGE_REPORTING_KAFKA_TOPIC_NAME: tenants-usage-reporting-topic-name
        FRONTEGG_METRICS_ENABLED: api-gateway-metrics-enabled
        FRONTEGG_ENABLE_MULTI_HOST: enable-multi-hosts
        FRONTEGG_REDIS_DB_INDEX: api-gateway-redis-db-index
        FRONTEGG_ENABLE_REDIS_STORE: api-gateway-enable-redis-store
        IGNORED_HOSTS: api-gateway-ignore-hosts

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.apiGatewayApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      encryptionSecret: {{ $secret.frontegg.applications.apiGateway.apiGatewayEncryptionSecret | toYaml }}
      customDomains:
        secretHeader: {{ $secret.frontegg.customDomains.secretHeader | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      sentryDsn: {{ $secret.externalServices.sentry.dsn | toYaml }}
      publicKey: {{ $secret.frontegg.xxx.authPublicKey | toYaml }}
      identityPublicKey: {{ $secret.frontegg.applications.identity.publicKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
        redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      proxy:
        authentication:
          apiKey: {{ $secret.frontegg.apiKeys.authenticationServiceApiKey | toYaml }}
        vendors:
          apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
        audits:
          apiKey: {{ $secret.frontegg.apiKeys.auditsServiceApiKey | toYaml }}
        team:
          apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
        admins:
          apiKey: {{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
        metadata:
          apiKey: {{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
        reportsService:
          apiKey: {{ $secret.frontegg.apiKeys.reportsServiceApiKey | toYaml }}
        reportsEngine:
          apiKey: {{ $secret.frontegg.apiKeys.reportsEngineApiKey | toYaml }}
        notifications:
          apiKey: {{ $secret.frontegg.apiKeys.notificationServiceApiKey | toYaml }}
        webpush:
          apiKey: {{ $secret.frontegg.apiKeys.webpushServiceApiKey | toYaml }}
        events:
          apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
        webhooks:
          apiKey: {{ $secret.frontegg.apiKeys.webhooksServiceApiKey | toYaml }}
        integrations:
          apiKey: {{ $secret.frontegg.apiKeys.integrationsServiceApiKey | toYaml }}
        tenants:
          apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        identity:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        subscriptions:
          apiKey: {{ $secret.frontegg.apiKeys.subscriptionsServiceApiKey | toYaml }}
        oauth:
          apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
        policy:
          apiKey: {{ $secret.frontegg.apiKeys.policyServiceApiKey | toYaml }}
        prehooks:
          apiKey: {{ $secret.frontegg.apiKeys.prehookApiKey | toYaml }}
        envDuplicator:
          apiKey: {{ $secret.frontegg.apiKeys.envDuplicatorApiKey | toYaml }}
        usageTracking:
          apiKey: {{ $secret.frontegg.apiKeys.usageTrackingApiKey | toYaml }}
        dashboardEnvBuilder:
          apiKey: {{ $secret.frontegg.apiKeys.dahboardEnvBuilderApiKey | toYaml }}
        backoffice:
          apiKey: {{ $secret.frontegg.apiKeys.backofficeApiKey | toYaml }}
        pricingViews:
          apiKey: {{ $secret.frontegg.apiKeys.pricingViewsApiKey | toYaml }}
        directoryService:
          apiKey: {{ $secret.frontegg.apiKeys.directoryServiceApiKey | toYaml }}
        logsService:
          apiKey: {{ $secret.frontegg.apiKeys.logsServiceApiKey | toYaml }}
        logsStreamingService:
          apiKey: {{ $secret.frontegg.apiKeys.logsStreamingServiceApiKey | toYaml }}
        entitlementsService:
          apiKey: {{ $secret.frontegg.apiKeys.entitlementsServiceApiKey | toYaml }}
        securityEngines:
          apiKey: {{ $secret.frontegg.apiKeys.securityEnginesApiKey | toYaml }}
        securityCenter:
          apiKey: {{ $secret.frontegg.apiKeys.securityCenterServiceApiKey | toYaml }}
        signals:
          apiKey: {{ $secret.frontegg.apiKeys.signalsServiceApiKey | toYaml }}
        applicationsService:
          apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
        customCodeService:
          apiKey: {{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
        authHub:
          apiKey: {{ $secret.frontegg.apiKeys.authHubServiceApiKey | toYaml }}
        nlpExecutionAssistant:
          apiKey: {{ $secret.frontegg.apiKeys.nlpExecutionAssistantApiKey | toYaml }}
    additionalSecrets: ""

################### Config Center
configCenter:
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-100"

  externalServices:
    secrets:
      url: ""
    iot:
      topic: ""
    aws:
      region: "us-east-1"
      componentsCollectionIdentifier: ""

  frontegg:
    general:
      analytics:
        segmentAnalyticsEnabled: "false"
        useFirehoseAnalytics: "true"
      portalUrl: ""
      corsOrigin: ""
      portalV1Url: ""
      customDomainCloudflareEndpoint: ""
      tracingCollectorEndpoint: "http://logzio-otel-traces.observability.svc.cluster.local:14268/api/traces"
      idgwApplicationId: ""
      splitioProxyEndpoint: "http://split-proxy-v2-web.feature-management.svc.cluster.local"
    applications:
      audits:
        auditsTopicName: "audits-v1"
        auditsDbType: "mysql"
        auditsDbName: "frontegg_audits"
        metadataServiceFetchPubsubStrategy: "true"
        metadataServiceTopicName: "METADATA_UPDATED"
        auditsServiceRedisDbIndex: "2"
        auditsKafkaRetryCount: "3"
      authentication:
        authenticationCookieDomain: ""
        authenticationSecuredCookie: ""
      apiGateway:
        apiGatewayUsageReportingEnabled: ""
        apiGatewayMetricsEnabled: ""
        apiGatewayRedisDbIndex: "9"
        enableMultiHosts: ""
        apiGatewayEnableRateLimiters: ""
        apiGatewayEnableRedisStore: ""
        apiGatewayIgnoredHosts:
        redirectEnabled: "false"
        redirectUrl: ""
      connectorsWorker:
        connectorsWorkerServiceRedisDbIndex: "5"
      dashboard:
        mixpanelId: ""
        dashboardHubspotEnabled: ""
        dashboardDevrevEnabled: "true"
        devrevApiUrl: "https://api.devrev.ai"
        dashboardDomainSuffix: ""
        cdnUrl: ""
        cdnBucket: ""
        backofficeViewerRoleId: ""
        backofficeEditorRoleId: ""
        fronteggUiEventsUrl: "https://ui-events.frontegg.com"
      events:
        eventsServiceRedisDbIndex: "7"
      identity:
        identityServiceDbName: "frontegg_identity"
        identityServiceAuditTriggeredTopicName: "AUDIT_TRIGGERED"
        identityServiceMaxConcurrentSessions: "100"
      metadata:
        metadataServiceDbConnectionTimeoutMs: "30000"
        metadataServiceDbConnectionRetryAttempts: "3"
        metadataServiceDbConnectionRetryDelay: "1000"
        metadataServiceRedisDbIndex: "0"
      notifications:
        eventsPubsubTopic: "events"
      reportingEngine:
        assetBlobStorageContainerName: "vendor-assets"
        reportingEngineApproversNotificationEmailTemplateId:
        iotRedisDbIndex: "4"
        iotRedisRecordTtlSeconds: "600"
        iotRedisMaxPollTimeoutMs: "60000"
        iotRedisPollIntervalMs: "1000"
        bucketUrl: ""
      reportsScheduler:
        reportingServiceFetchPubsubStrategy: "true"
        reportingServiceTopicName: "reporting-changes"
      subscription:
        stripeRegion: "eu"
        defaultStripeRegion: "eu"
      teamManagement:
        teamManagementServiceDbName: "frontegg_team_management"
        teamManagementServiceRedisDbIndex: "1"
        teamManagementServiceAuthorizationTopicName: "authorization-v1"
      tenants:
        tenantsUsageReportingTopicName: "usage-reporting-v1"
        tenantsRedisDbIndex: "8"
        tenantsServiceMysqlDbName: "frontegg_tenants"
        tenantAssetsS3Bucket: ""
        tenantAssetsS3Url: "https://{{ $.Values.configCenter.externalServices.aws.componentsCollectionIdentifier }}-tenants-assets.s3.{{ $.Values.configCenter.externalServices.aws.region }}.amazonaws.com"
        s3:
          tenantsServiceAwsEndpoint: ""
          tenantsServiceTenantAssetsS3Endpoint: ""
      customCode:
        lambda:
          management:
            roleArn: ""
          execution:
            roleArn: ""
            defaultPolicies: ""
          environment:
            variables:
              cxDomain: ""
          layers: ""
      vendors:
        vendorsServiceMysqlDbName: "frontegg_vendors"
        vendorsAssetBlobStorageContainerName: "public-vendor-assets"
        vendorsServiceVendorsDomain: "dev.frontegg.com"
        customDomainClusterIngressClass: "nginx"
        customDomainClusterIssuerName: "letsencrypt"
        customDomainClusterDefaultPort: "443"
        customDomainClusteNamespace: "custom-domains"
        customDomainSslEndpoint: ""
        customDomainCloudflareTransformRuleSetId: "xxxx"
        customDomainCloudflareOriginRuleSetId: "xxxx"
        kafkaVendorsTopic: "vendors-v1"
      webhooks:
        webhookServiceMongodbConnectionRetryAttempts: "3"
        webhookServiceMongodbConnectionRetryDelay: "1000"
        webhookMysqlDbName: "frontegg_webhooks"
        proxyEnabled: "true"
      webpush:
        webpushMongodbConnectionRetryAttempts: "3"
        webpushMongodbConnectionRetryDelay: "1000"
      sidekick:
        sidekickAllowedOrigin: "*"
        sidekickTenantId: ""
      dataIngest:
        dataIngestDbSchema: "frontegg_ingest"
        dataIngestKafkaTopic: "usage-reporting-v1"
        dataIngestKafkaVendorsTopic: "vendors-v1"
      pqlProcess:
        pqlProcessHubspotEnableCompaniesSync: ""
        pqlProcessHubspotEnableReporting: ""
      oauth:
        oauthServiceDbName: "frontegg_oauth"
        oauthServiceRedisDbIndex: "10"
      policy:
        opaPolicyBucket: ""
        configCopyResultTopicName: "configuration-copy-result-v1"
        configCopyTopicName: "configuration-copy-v1"
      envDuplicator:
        configCopyResultTopicName: "configuration-copy-result-v1"
        configCopyTopicName: "configuration-copy-v1"
        dbName: "frontegg_env_duplicator"
      backoffice:
        redis:
          redisDbIndex: "12"
      entitlements:
        redisDBIndex: "12"
        vendorSnapshotJobDelayMS: "10000"
        vendorSnapshotJobAttempts: "3"
        opaPolicyBucket: ""
      forwardProxy:
        isAuthRequired: "false"
        host: "frontegg-forward-proxy"
        port: "8080"
        protocol: "http"

    services:
      prehookServiceUrl: "http://frontegg-prehook-service"
      adminsServiceUrl: "http://frontegg-admins-service"
      auditsServiceUrl: "http://frontegg-audits-service"
      authenticationServiceUrl: "http://frontegg-authentication-service"
      metadataServiceUrl: "http://frontegg-metadata-service"
      notificationServiceUrl: "http://frontegg-notification-service"
      reportsEngineUrl: "http://frontegg-reporting-engine"
      reportsServiceUrl: "http://frontegg-reporting-service"
      teamServiceUrl: "http://frontegg-team-management-service"
      vendorsServiceUrl: "http://frontegg-vendors-service"
      tenantsServiceUrl: "http://frontegg-tenants-service"
      webpushServiceUrl: "http://frontegg-webpush-service"
      webhookServiceUrl: "http://frontegg-webhook-service"
      eventsServiceUrl: "http://frontegg-event-service"
      identityServiceUrl: "http://frontegg-identity-service"
      identityP1ServiceUrl: "http://frontegg-identity-service-hp"
      integrationsServiceUrl: "http://frontegg-integrations-service"
      apiGatewayUrl: "https://dev-api.frontegg.com"
      apiGatewayInternalUrl: "http://api-gateway-v2-web"
      oauthServiceUrl: "http://frontegg-oauth-service"
      subscriptionsServiceUrl: "http://frontegg-subscriptions-service"
      policyServiceUrl: "http://frontegg-policy-service"
      usageTrackingUrl: "http://usage-tracking-service"
      envDuplicatorUrl: "http://frontegg-env-duplicator-service"
      dashboardEnvBuilderUrl: "http://frontegg-dashboard-env-builder-service"
      backofficeUrl: "http://frontegg-backoffice-service"
      pricingViewsUrl: "http://frontegg-pricing-views-service"
      emailServiceUrl: "http://frontegg-email-service"
      directoryServiceUrl: "http://frontegg-directory-service"
      logsServiceUrl: "http://frontegg-logs-service"
      logsStreamingServiceUrl: "http://frontegg-logs-streaming-service"
      entitlementsServiceUrl: "http://frontegg-entitlements-service"
      securityEnginesUrl: "http://frontegg-security-engines"
      securityCenterServiceUrl: "http://frontegg-security-center-service"
      signalsServiceUrl: "http://frontegg-signals-service"
      applicationsServiceUrl: "http://frontegg-applications-service"
      customCodeServiceUrl: "http://frontegg-custom-code-service"
      entitlementsAgentUrl: "http://frontegg-entitlements-agent"
      authHubServiceUrl: "http://auth-hub-v2-web"
      nlpExecutionAssistantUrl: "http://nlp-execution-assistant-v2-web"
      anomalyDetectionUrl: "http://anomaly-detection-v2-web"
      fronteggVendorHost: "EMPTY"