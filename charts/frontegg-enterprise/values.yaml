#strimzi-kafka-operator:
#debezium-operator:

debezium:
  enabled: true
  bootstrapServers: "b-1.prodmsk360.b35ne2.c1.kafka.us-east-1.amazonaws.com:9092,b-2.prodmsk360.b35ne2.c1.kafka.us-east-1.amazonaws.com:9092,b-3.prodmsk360.b35ne2.c1.kafka.us-east-1.amazonaws.com:9092"
  secret:
    externalSecretEnabled: true
    name: kafka-secret
  kafkaConnect:
    install: false
    enabled: false
    version: "3.8.0"
    image: "527305576865.dkr.ecr.us-east-1.amazonaws.com/docker-hub/frontegg/strimzi-debezium-kafka-connect:3.8.0"
  debeziumOperator:
    install: true
    enabled: true
    version: "3.1.0.Final"
    image: "quay.io/debezium/server:3.1"

# Configuration for the initial database setup job
initDbJob:
  enabled: true # Set to true to run this job
  job:
    image:
      repository: mysql
      tag: "8.0"
      pullPolicy: IfNotPresent
    annotations: {}
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 100m
        memory: 128Mi
  secret:
    enabled: true
    name: database-credentials
    remoteRefKey: "prod-frontegg-private-deployment-main-secret"

# Configuration for the task-master encrypt job
# remember if using ses the email domain should be verified first
taskMasterEncryptJob:
  email: "devops@frontegg.com"
  password: "Fe123456!@"

# Configuration for the admins service
admins:
  name: admins
  team: frontegg
  envID: &envId "prod-frontegg-private-deployment-main-secret"
  appVersion: a647314
  image:
    repository: frontegg/admins-service
    prefix: &imagePrefix 527305576865.dkr.ecr.us-east-1.amazonaws.com/docker-hub/
  argoRollouts:
    enabled: false
  defaults: &defaultsAnnotations
    migration:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-5"
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    configmap:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    secret:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    sereviceAccount:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"

  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3004
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3004
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    additionalVolumes: &additionalVolumes |
      - name: vol-settings
        configMap:
          name: 'settings'
    additionalVolumeMounts: &additionalVolumeMounts |
      - name: vol-settings
        mountPath: /etc/config/settings.yaml
        subPath: settings.yaml
  configmap:
    data:
      CLOUD_ENVIRONMENT: production
      NODE_ENV: production
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: &settingConfigPath "/etc/config/settings.yaml"
  configuration:
    map:
      config-center:
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        PORTAL_URL: portal-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml }}
      FRONTEGG_EVENT_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
    additionalSecrets: ""

team-management-service:
  name: team-management
  team: frontegg
  envID: *envId
  appVersion: 3d55319
  image:
    repository: frontegg/team-management-service
    prefix: *imagePrefix
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3003
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3003
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 40
      periodSeconds: 20
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    labels:
      scrape-for-metrics: enabled
    replicaCount: 1
    service:
      ports:
        - port: 80
          targetPort: 3003
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3003
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 60
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: team-management-service
      NODE_ENV: production
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_ANALYTICS_TYPE: firehose
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.yaml"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: "/etc/config/settings.yaml"
      LOG_LEVEL: verbose

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_METADATA_SERVICE_URL: metadata-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_AUTHORIZATION_KAFKA_TOPIC_NAME: team-management-service-authorization-topic-name
        FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_DB_INDEX: team-management-service-redis-db-index
        FRONTEGG_ASSET_BLOB_STORAGE_CONTAINER_NAME: vendors-asset-blob-storage-container-name
        FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_NAME: team-management-service-db-name
        FRONTEGG_TEAM_MANAGEMENT_SERVICE_VAULT_URL: team-management-service-vault-url
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_CDN_BUCKET: cdn-bucket
        FRONTEGG_AWS_REGION: aws-region
        FRONTEGG_CDN_URL: cdn-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      FRONTEGG_METADATA_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
      FRONTEGG_TEAM_MANAGEMENT_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      FRONTEGG_SECRETS_PHRASE={{ $secret.frontegg.applications.teamManagement.secretPhrase | toYaml }}
      FRONTEGG_FIREHOSE_ACCESS_KEY_ID={{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
      FRONTEGG_FIREHOSE_SECRET_ACCESS_KEY={{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
      FRONTEGG_AWS_FIREHOSE_REGION={{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
      FRONTEGG_CLOUDFLARE_PURGE_CACHE_ZONE_ID={{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
      FRONTEGG_CLOUDFLARE_PURGE_CACHE_TOKEN={{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
      FRONTEGG_ASSET_BLOB_STORAGE_CONNECTION_STRING={{ $secret.databases.storage.azure.connectionString | toYaml }}

    additionalSecrets: ""

webhooks:
  name: webhooks
  team: frontegg
  envID: *envId
  appVersion: 7afbe83
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/webhook-service
    prefix: *imagePrefix
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3013
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3013
    env:
      - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
        value: "false"
    podAnnotations:
      config.linkerd.io/skip-outbound-ports: "8080"
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
      failureThreshold: 3
    livenessProbe:
      httpGet:
        path: /health
        port: http
      failureThreshold: 30
      periodSeconds: 10
    startupProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 15
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3013
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3013
    env:
      - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
        value: "true"
    labels:
      scrape-for-metrics: enabled
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    startupProbe:
      httpGet:
        path: /health
        port: http
      failureThreshold: 30
      periodSeconds: 10
    livenessProbe:
      httpGet:
        path: /health
        port: http
      periodSeconds: 10
      failureThreshold: 30
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes

  configmap:
    data:
      NODE_ENV: production
      FRONTEGG_PORT: "3013"
      FRONTEGG_SERVICE_NAME: webhook-service
      FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_ATTEMPTS: "3"
      FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_DELAY: "1000"
      FRONTEGG_EVENT_SERVICE_URL: http://frontegg-event-service
      FRONTEGG_EVENTS_PUBSUB_TOPIC: events
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_USE_FIREHOSE_ANALYTICS: "false"
      FRONTEGG_ANALYTICS_TYPE: firehose
      FRONTEGG_VALIDATION_WEBHOOK_URL_HOSTNAME_BLACKLIST_REGEXP: (169\.254\.\d+.\d+)|(127\.0\.0\.1)
      FRONTEGG_WEBHOOK_GUARD_FEATURE_FLAG_NAME: "webhooks_blacklist"
      FRONTEGG_HTTP_CLIENT_PROXY_AUTH_ENABLED: "false"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLITIO_LOCAL_CONFIG_FILE: /etc/config/settings.yaml
      NODE_NO_WARNINGS: "1"

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_WEBHOOK_MYSQL_DB_NAME: webhook-mysql-db-name
        FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_ATTEMPTS: webhook-service-mongodb-connection-retry-attempts
        FRONTEGG_WEBHOOK_SERVICE_MONGODB_CONNECTION_RETRY_DELAY: webhook-service-mongodb-connection-retry-delay
        FRONTEGG_EVENTS_PUBSUB_TOPIC: events-pubsub-topic
        FRONTEGG_HTTP_CLIENT_PROXY_ENABLED: webhook-proxy-enabled
        FRONTEGG_HTTP_CLIENT_PROXY_HOST: frontegg-proxy-host
        FRONTEGG_HTTP_CLIENT_PROXY_PORT: frontegg-proxy-port
        FRONTEGG_HTTP_CLIENT_PROXY_PROTO: frontegg-proxy-protocol

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.webhooksServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      splitIO:
        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mongoDB:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      internalServices:
        eventService:
          apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      analytics:
        firehose:
          aws:
            keyId: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
            secretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
            region: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}

    additionalSecrets: ""

vendors-service:
  name: vendors
  team: frontegg
  envID: *envId
  appVersion: a66329f
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/vendor-service
    prefix: *imagePrefix
  web:
    enabled: true
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3001
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3001
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
      advanced:
        horizontalPodAutoscalerConfig: # Optional. Section to specify HPA related options
          name: '{{ include "web.name" $ }}'
          behavior:
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
                - type: Pods
                  value: 1
                  periodSeconds: 60
            scaleUp:
              stabilizationWindowSeconds: 0
              policies:
                - type: Pods
                  value: 3
                  periodSeconds: 10
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    service:
      ports:
        - port: 80
          targetPort: 3001
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3001
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: vendors-service
      NODE_ENV: production
      FRONTEGG_SEGMENT_ENABLED: "false"
      FRONTEGG_SEGMENT_GOOGLE_ENABLED: "false"
      MIGRATION_DIR_PATH: "./dist/typeorm-migrations"
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      NODE_NO_WARNINGS: "1"
      SENTRY_ENABLED: "false"
      LOG_LEVEL: verbose
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKeyEncryptionSecret: {{ $secret.frontegg.applications.vendors.apiKeySecret | toYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      fronteggApiKey: {{ $secret.frontegg.xxx.fronteggApiKey | toYaml }}
      fronteggPrivateKey: {{ $secret.frontegg.applications.authentication.authenticationPrivateKey | toYaml }}
      splitIO:
        webhooks:
          secret: {{ $secret.externalServices.split.webhooks.secret | toYaml }}
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      webhookSecret: {{ $secret.frontegg.applications.vendors.webhookSecret | toYaml }}
      prehookSecret: {{ $secret.frontegg.applications.vendors.prehookSecret | toYaml }}
      adminsService:
        apiKey: {{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      tenantsService:
        apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
      identityService:
        apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        baseP1Url: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      teamManagementService:
        apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
        baseUrl: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      database:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
        mongoDb:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
      segment:
        writeKey: {{ $secret.frontegg.analytics.segmentWriteKey | toYaml }}
      segmentToGoogleAnalytics:
        writeKey: {{ $secret.frontegg.applications.vendors.segmentGoogleWriteKey | toYaml }}
      customDomainSettings:
        credentials:
          clusterContextString: {{ $secret.frontegg.applications.vendors.customDomains.clusterContext | toYaml }}
        secretHeader: {{ $secret.frontegg.customDomains.secretHeader | toYaml }}
      assetsStorage:
        connectionString: {{ $secret.databases.storage.azure.connectionString | toYaml }} 
      redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
          tls: {{ $secret.databases.redis.tls | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
      cloudflare:
        cdn:
          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_IDENTITY_P1_SERVICE_URL: identity-p1-service-url
        FRONTEGG_CUSTOM_DOMAIN_CLOUDFLARE_SSL_ENDPOINT: custom-domain-cloudflare-ssl-endpoint
        FRONTEGG_PORTAL_URL: portal-url
        FRONTEGG_VENDORS_SERVICE_DB_NAME: vendors-mysql-db-name
        FRONTEGG_KAFKA_VENDORS_TOPIC_NAME: vendors-service-kafka-vendors-topic
        ASSET_BLOB_STORAGE_CONTAINER_NAME: vendors-asset-blob-storage-container-name
        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_INGRESS_CLASS: custom-domain-cluster-ingress-class
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_ISSUER_NAME: custom-domain-cluster-issuer-name
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_DEFAULT_PORT: custom-domain-cluster-default-port
        FRONTEGG_CUSTOM_DOMAIN_CLUSTER_NAMESPACE: custom-domain-cluste-namespace
        FRONTEGG_SSL_ENDPOINT: custom-domain-ssl-endpoint
        FRONTEGG_CUSTOM_DOMAIN_CLOUDFLARE_TRANSFORM_RULE_SET_ID: custom-domain-cloudflare-transform-rule-set-id
        FRONTEGG_CUSTOM_DOMAIN_CLOUDFLARE_ORIGIN_RULE_SET_ID: custom-domain-cloudflare-origin-rule-set-id
        FRONTEGG_VENDOR_HOST: frontegg-vendor-host
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_CDN_URL: cdn-url
        FRONTEGG_AWS_REGION: aws-region
        FRONTEGG_CDN_BUCKET: cdn-bucket

tenants-service:
  name: tenants
  team: frontegg
  envID: *envId
  appVersion: 40a0b38
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/tenants-service
    prefix: *imagePrefix
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3015
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3015
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 40
      periodSeconds: 60
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes

  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    labels:
      scrape-for-metrics: enabled
    replicaCount: 1
    service:
      ports:
        - port: 80
          targetPort: 3015
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3015
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 60
      periodSeconds: 60
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi

  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_ANALYTICS_TYPE: firehose
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml

  configuration:
    map:
      config-center:
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_TENANT_ASSETS_S3_BUCKET: tenant-assets-s3-bucket
        FRONTEGG_TENANTS_SERVICE_MYSQL_DB_NAME: tenants-service-mysql-db-name
        FRONTEGG_USAGE_REPORTING_KAFKA_TOPIC_NAME: tenants-usage-reporting-topic-name
        FRONTEGG_TENANTS_SERVICE_REDIS_DB_INDEX: tenants-redis-db-index
        FRONTEGG_TENANT_ASSETS_S3_ENDPOINT: tenant-assets-s3-endpoint
        FRONTEGG_AWS_ENDPOINT: tenant-assets-s3-aws-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      database:
        mongo:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
        sql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      analytics:
        firehose:
          awsRegion: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
          awsAccessKey: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
          awsSecretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
      cloudflare:
        cdn:
          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}

    additionalSecrets: ""

security-engines:
  name: security-engines
  team: frontegg
  envID: *envId
  appVersion: 283f4d9
  image:
    repository: "frontegg/security-engines"
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3032
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3032
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3032
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3032
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configmap:
    data:
      NODE_ENV: production
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: security-engines
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: verbose
      MIGRATION_DIR_PATH: ./dist/migrations
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      SENTRY_ENABLED: "true"
      SENTRY_DSN: "https://df4e77306fe836ca17283337bab8570a@o362363.ingest.us.sentry.io/4507877559697408"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_ANOMALY_DETECTION_SERVICE_URL: anomaly-detection-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.securityEnginesApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      databases:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      encryption:
        secret: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
      ipStack:
        accessKey: {{ $secret.frontegg.xxx.ipStackApiKey | toYaml }}
      ipData:
        apiKey: {{ $secret.frontegg.xxx.ipDataApiKey | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      cloudflare:
        cdn:
          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}

    additionalSecrets: ""

security-center-service:
  name: security-center
  team: frontegg
  envID: *envId
  appVersion: 88d3de0
  image:
    repository: "frontegg/security-center-service"
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3033
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3033
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3033
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3033
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configmap:
    data:
      NODE_ENV: production
      LOG_LEVEL: verbose
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: security-center-service
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.securityCenterServiceApiKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mongo:
          uri: {{ $secret.databases.mongo6.connectionString | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
      ipStack:
        accessKey: {{ $secret.frontegg.xxx.ipStackApiKey | toYaml }}
      ipData:
        apiKey: {{ $secret.frontegg.xxx.ipDataApiKey | toYaml }}

    additionalSecrets: ""

prehook-service:
  name: prehooks
  team: frontegg
  envID: *envId
  appVersion: b325627
  image:
    repository: frontegg/prehook-service
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    service:
      ports:
        - port: 80
          targetPort: 3021
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3021
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: prehook-service
      NODE_ENV: production
      FRONTEGG_PREHOOK_TIMEOUT: "5000"
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_FILE_PATH: /etc/config/config.env
      FRONTEGG_HTTP_CLIENT_PROXY_ENABLED: "true"
      NODE_NO_WARNINGS: "1"
      FRONTEGG_SPLIT_IO_LOCAL_CONFIG_FILE: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 250m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
        FRONTEGG_HTTP_CLIENT_PROXY_HOST: frontegg-proxy-host
        FRONTEGG_HTTP_CLIENT_PROXY_PORT: frontegg-proxy-port
        FRONTEGG_HTTP_CLIENT_PROXY_PROTO: frontegg-proxy-protocol

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml}}
      FRONTEGG_PREHOOK_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.prehookApiKey | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_PREHOOK_SERVICE_DB_URL={{ $secret.databases.mongo.connectionString | toYaml }}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      # FRONTEGG_CUSTOM_CODE_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
    additionalSecrets: ""

metadata-service:
  name: metadata
  team: frontegg
  envID: *envId
  appVersion: 082a0cb
  image:
    repository: "frontegg/metadata-service"
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3005
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3005
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_PORT: "3005"
      FRONTEGG_SERVICE_NAME: metadata-service
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
  configuration:
    map:
      config-center:
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_METADATA_SERVICE_TOPIC_NAME: metadata-service-topic-name
        FRONTEGG_METADATA_SERVICE_DB_CONNECTION_TIMEOUT_MS: metadata-service-db-connection-timeout-ms
        FRONTEGG_METADATA_SERVICE_DB_CONNECTION_RETRY_ATTEMPTS: metadata-service-db-connection-retry-attempts
        FRONTEGG_METADATA_SERVICE_DB_CONNECTION_RETRY_DELAY: metadata-service-db-connection-retry-delay
        FRONTEGG_METADATA_SERVICE_IP_STACK_URL: metadata-service-ip-stack-url
        FRONTEGG_METADATA_SERVICE_REDIS_DB_INDEX: metadata-service-redis-db-index
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_CDN_URL: cdn-url
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml}}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_METADATA_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      FRONTEGG_METADATA_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
      FRONTEGG_METADATA_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
      FRONTEGG_METADATA_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
      FRONTEGG_METADATA_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
      FRONTEGG_METADATA_SERVICE_DB_URL={{ $secret.databases.mongo.connectionString | toYaml }}
      FRONTEGG_METADATA_SERVICE_IP_STACK_API_KEY={{ $secret.frontegg.xxx.ipStackApiKey | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      FRONTEGG_CLOUDFLARE_PURGE_CACHE_ZONE_ID={{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
      FRONTEGG_CLOUDFLARE_PURGE_CACHE_TOKEN={{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
      FRONTEGG_IP_DATA_API_KEY={{ $secret.frontegg.xxx.ipDataApiKey | toYaml }}
    additionalSecrets: ""

logs-service:
  name: logs
  team: frontegg
  envID: *envId
  appVersion: b2090a9
  image:
    repository: "frontegg/logs-service"
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    env:
      - name: FRONTEGG_LOGS_SERVICE_OFFLINE_PROCESS
        value: "false"
    service:
      ports:
        - port: 80
          targetPort: 3029
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3029
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    env:
      - name: FRONTEGG_LOGS_SERVICE_OFFLINE_PROCESS
        value: "true"
    service:
      ports:
        - port: 80
          targetPort: 3029
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3029
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  cronjobs:
    retention-enforcement:
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
      enabled: true
      schedule: "@hourly"
      ttlSecondsAfterFinished: 600
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 4
      successfulJobsHistoryLimit: 4
      restartPolicy: Never
      command: ["/bin/bash"]
      args: ["entrypoint.sh", "command", "enforce-retention"]
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
  configmap:
    data:
      NODE_ENV: production
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: logs-service
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_FEATURE_RETENTION_FEATURE_FLAG_NAME: "logs-retention"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLIT_IO_LOCAL_CONFIG_FILE: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_BACKOFFICE_URL: backoffice-service-url
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.logsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mongo:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
      internalServices:
        backoffice:
          apiKey: {{ $secret.frontegg.apiKeys.backofficeApiKey | toYaml }}
      splitIO:
        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
    additionalSecrets: ""

forward-proxy:
  name: forward-proxy
  team: frontegg
  envID: *envId
  appVersion: 43521f0
  image:
    repository: frontegg/forward-proxy
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/server"]
    args: []
    service:
      scrape: false
      labels:
        monitoring-port: metrics
      ports:
        - name: http
          port: 8080
          protocol: TCP
          targetPort: 4750
        - name: metrics
          port: 9090
          protocol: TCP
          targetPort: 9090
    ports:
      - name: http
        containerPort: 4750
      - name: metrics
        containerPort: 9090
    resources:
      requests:
        cpu: 500m
        memory: 512Mi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    readinessProbe:
      httpGet:
        path: /healthcheck
        port: 4750
      initialDelaySeconds: 40
      periodSeconds: 5
      failureThreshold: 1
    livenessProbe:
      httpGet:
        path: /healthcheck
        port: 4750
      initialDelaySeconds: 40
      periodSeconds: 20
    startupProbe:
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 5
    terminationGracePeriodSeconds: 60
    additionalVolumes: |
      - name: vol-config
        configMap:
          name: '{{ include "fullname" $ }}-config'
      - name: vol-acl
        configMap:
          name: '{{ include "fullname" $ }}-acl'
    additionalVolumeMounts: |
      - name: vol-acl
        mountPath: /etc/smokescreen/acl.yaml
        subPath: acl.yaml
      - name: vol-config
        mountPath: /etc/smokescreen/config.yaml
        subPath: config.yaml
  externalSecret:
    enabled: false
  additionalResources: |
    ---
    kind: ConfigMap
    apiVersion: v1
    metadata:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
      name: {{ include "fullname" $ }}-acl
      labels:
        {{- include "labels" $ | nindent 4 }}
    data:
      acl.yaml: |
        ---
        version: v1
        services:
          - name: test-trusted-srv
            project: security
            action: report
            allowed_domains:
              - frontegg.com

        default:
          project: other
          action: report
          allowed_domains:
            - test.com

        global_allow_list:
          - google.com

        global_deny_list:
          - 127.0.0.1
    ---
    kind: ConfigMap
    apiVersion: v1
    metadata:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
      name: {{ include "fullname" $ }}-config
      labels:
        {{- include "labels" $ | nindent 4 }}
    data:
      config.yaml: |
        ---
        allow_missing_role: true # skip mTLS client validation
        unsafe_allow_private_ranges: false

event-service:
  name: events
  team: frontegg
  envID: *envId
  appVersion: 2569e6b
  image:
    repository: "frontegg/event-service"
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    resources:
      requests:
        cpu: 1000m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3011
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3011
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 20
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      NODE_OPTIONS: "--no-warnings"
      PORT: "3011"
      LOG_LEVEL: "verbose"
      FRONTEGG_SERVICE_NAME: event-service
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_CHANNEL_AUDIT_TOPIC_PARTITIONS_NUM: "10"
      FRONTEGG_CHANNEL_WEBHOOK_TOPIC_PARTITIONS_NUM: "40"
      FRONTEGG_EVENTS_SERVICE_EVENTS_CONSUMER_TOPIC_PARTITIONS_NUM: "10"
      FRONTEGG_SPLIT_FEATURES_FILE: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
    seeder:
      enabled: true
      metadata:
        annotations:
          "helm.sh/hook": pre-install, pre-upgrade
          "helm.sh/hook-weight": "-4"
          "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
      spec:
        command: ["npm"]
        args:
          - "run"
          - "seed"
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
  configuration:
    map:
      config-center:
        FRONTEGG_EVENTS_SERVICE_REDIS_DB_INDEX: events-service-redis-db-index
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_ENV_ID: env-id
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
        mysql_event_retry:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      splitIO:
        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
    additionalSecrets: ""

env-duplicator:
  name: env-duplicator
  team: frontegg
  envID: *envId
  appVersion: 44cc5b3
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/env-duplicator
    prefix: *imagePrefix
  imagePullPolicy: Always
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    service:
      ports:
        - port: 80
          targetPort: 3022
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3022
    resources:
      requests:
        cpu: 250m
        memory: 1Gi
      limits:
        memory: 2Gi
    livenessProbe:
      httpGet:
        path: /health/liveness
        port: http
      initialDelaySeconds: 30
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 5
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: env-duplicator
      NODE_ENV: production
      FRONTEGG_ENV_DUPLICATOR_DB_NAME: frontegg_env_duplicator
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLIT_IO_LOCAL_CONFIG_FILE: /etc/config/settings.yaml

  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_DUPLICATOR_VENDOR_URL: vendors-service-url
        FRONTEGG_ENV_DUPLICATOR_IDENTITY_URL: identity-service-url
        FRONTEGG_ENV_DUPLICATOR_OAUTH_URL: oauth-service-url
        FRONTEGG_ENV_DUPLICATOR_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_ENV_DUPLICATOR_METADATA_URL: metadata-service-url
        FRONTEGG_ENV_DUPLICATOR_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_ENV_DUPLICATOR_DB_NAME: env-duplicator-mysql-db-name
        FRONTEGG_ENV_DUPLICATOR_COPY_RESULTS_TOPIC: env-duplicator-configuration-copy-result-topic-name
        FRONTEGG_ENV_DUPLICATOR_COPY_TOPIC: env-duplicator-configuration-copy-topic-name

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.envDuplicatorApiKey | toYaml }}
      splitIO:
        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
      vendorServiceApiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      oauthService:
        apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
      eventsService:
        apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      identityService:
        apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      teamManagementService:
        apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      metadataService:
        apiKey: {{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      database:
        host: {{ $secret.databases.generalMysql.host | toYaml }}
        username: {{ $secret.databases.generalMysql.username | toYaml }}
        password: {{ $secret.databases.generalMysql.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}

    additionalSecrets: ""

entitlements-service:
  name: entitlements
  team: frontegg
  envID: *envId
  appVersion: 21ca05b
  image:
    repository: "frontegg/entitlements-service"
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3031
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3031
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3031
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3031
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        memory: 2Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
    plans:
      enabled: true
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-4"
        "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
      spec:
        command: ["/bin/bash"]
        args: ["./run-plans.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
  configmap:
    data:
      NODE_ENV: production
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: entitlements-service
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: verbose
      MIGRATION_DIR_PATH: dist/migrations
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLIT_IO_FEATURES_FILE: /etc/config/settings.yaml
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: "false"
  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_ENTITLEMENTS_SERVICE_REDIS_DB_INDEX: entitlements-redis-db-index
        FRONTEGG_ENTITLEMENTS_SERVICE_VENDOR_SNAPSHOT_JOB_DELAY: entitlements-vendor-snapshot-job-delay-ms
        FRONTEGG_ENTITLEMENTS_SERVICE_VENDOR_SNAPSHOT_JOB_ATTEMPTS: entitlements-vendor-snapshot-job-attempts
        FRONTEGG_ENTITLEMENTS_SERVICE_AWS_REGION: aws-region
        FRONTEGG_ENTITLEMENTS_SERVICE_AWS_S3_BUCKETS_OPA_POLICIES: entitlements-service-s3-opa-policy-bucket
        FRONTEGG_ENTITLEMENTS_SERVICE_LEGACY_VENDORS_PLAN_IDS: entitlements-service-legacy-vendors-plan-ids
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_IDENTITY_SERVICE_P1_URL: identity-p1-service-url
        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.entitlementsServiceApiKey | toYaml }}
      splitIO:
        splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
        redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      internalServices:
        identityP1:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        identity:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      databases:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
    additionalSecrets: ""

entitlements-agent:
  name: entitlements-agent
  team: adoption
  envID: *envId
  appVersion: e6ac14f
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  image:
    repository: frontegg/entitlements-agent
    prefix: *imagePrefix
  web:
    enabled: true
    command: ["opa"]
    args:
      - "run"
      - "--server"
      - "--watch"
      - "--addr=0.0.0.0:8181"
      - "--config-file=/etc/config/config.yaml"
      - "--log-level=$(LOG_LEVEL)"
    service:
      ports:
        - port: 80
          targetPort: 8181
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 8181
    resources:
      requests:
        cpu: 500m
        memory: 500Mi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 60
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 3
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 3
      periodSeconds: 5
    startupProbe:
      httpGet:
        path: /health?bundles
        port: http
      initialDelaySeconds: 5
      failureThreshold: 10
      periodSeconds: 10
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: entitlements-agent
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: info
      ALLOW_INSECURE_TLS: "false"
      DECISION_LOG_CONSOLE_ENABLED: "false"
      POLLING_MIN_DELAY: "30"
      POLLING_MAX_DELAY: "60"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_URL: api-gateway-url
        FRONTEGG_PORTAL_URL: frontegg-vendor-host
        ENTITLEMENTS_SERVICE_URL: entitlements-service-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      services:
        - name: frontegg-bundle-endpoint
          url: "${ENTITLEMENTS_SERVICE_URL}"
          headers:
            frontegg-vendor-id: "{{ $secret.frontegg.xxx.fronteggClientId | toYaml }}"
            frontegg-internal-request: "true"
            x-frontegg-api-key: "{{ $secret.frontegg.apiKeys.entitlementsServiceApiKey | toYaml }}"
          # use this when you want to use self-signed certificate
          allow_insecure_tls: ${ALLOW_INSECURE_TLS}
      decision_logs:
        console: ${DECISION_LOG_CONSOLE_ENABLED}
      status:
        prometheus: true
      bundles:
        frontegg:
          service: frontegg-bundle-endpoint
          resource: resources/bundles/v1
          persist: false
          polling:
            min_delay_seconds: ${POLLING_MIN_DELAY}
            max_delay_seconds: ${POLLING_MAX_DELAY}
    additionalSecrets: ""

directory-service:
  name: directory
  team: frontegg
  envID: *envId
  appVersion: 44ca6ef
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  image:
    repository: "frontegg/directory-service"
    prefix: *imagePrefix
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3027
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3027
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    tolerations: []
    affinity: {}
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    env:
      - name: FRONTEGG_DIRECTORY_SERVICE_OFFLINE_PROCESS
        value: "true"
    service:
      ports:
        - port: 80
          targetPort: 3027
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3027
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configmap:
    data:
      NODE_ENV: production
      LOG_LEVEL: verbose
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: directory-service
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.directoryServiceApiKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      databases:
        mongo:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
      encryption:
        secret: {{ $secret.frontegg.applications.directory.directoryServiceEncryptionKey | toYaml }}
    additionalSecrets: ""

dashboard-env-builder:
  name: dashboard-env-builder
  team: frontegg
  envID: *envId
  appVersion: fee7feb
  image:
    repository: frontegg/dashboard-env-builder
    prefix: *imagePrefix
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  web:
    enabled: true
    service:
      ports:
        - port: 80
          targetPort: 3024
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3024
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: production
      FRONTEGG_SERVICE_NAME: dashboard-env-builder
      NODE_ENV: production
      FRONTEGG_DASHBOARD_ENV_BUILDER_DB_NAME: frontegg_dashboard_env_builder
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_ENV_DUPLICATOR_URL: env-duplicator-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_IDENTITY_URL: identity-service-url
        FRONTEGG_IDENTITY_P1_SERVICE_URL: identity-p1-service-url
        FRONTEGG_OAUTH_URL: oauth-service-url
        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_METADATA_URL: metadata-service-url
        FRONTEGG_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_CDN_URL: cdn-url

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.dahboardEnvBuilderApiKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      database:
        host: {{ $secret.databases.generalMysql.host | toYaml }}
        username: {{ $secret.databases.generalMysql.username | toYaml }}
        password: {{ $secret.databases.generalMysql.password | toYaml }}
        useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
      envDuplicatorService:
        apiKey: {{ $secret.frontegg.apiKeys.envDuplicatorApiKey | toYaml }}
      vendorsService:
        apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      identityService:
        apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      teamManagementService:
        apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
      metadataService:
        apiKey: {{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      oauthService:
        apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
      eventsService:
        apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
    additionalSecrets: ""

backoffice-service:
  name: backoffice
  team: frontegg
  envID: *envId
  appVersion: venv-bf05e47
  image:
    repository: frontegg/backoffice-service
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3025
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3025
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 2Gi
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3025
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3025
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 2Gi
    livenessProbe:
    #    httpGet:
    #      path: /health
    #      port: http
    #    initialDelaySeconds: 60
    #    periodSeconds: 20
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 60
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: backoffice-service
      NODE_ENV: production
      FRONTEGG_TENANTS_KAFKA_TOPIC_NAME: tenants-v1
      FRONTEGG_BACKOFFICE_SERVICE_ENCRYPT_ALGORITHM: aes-256-cbc
      FRONTEGG_BACKOFFICE_SERVICE_DB_NAME: frontegg_backoffice
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_FILE_PATH: /etc/config/config.env
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
  configuration:
    map:
      config-center:
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_BACKOFFICE_SERVICE_REDIS_DB_INDEX: backoffice-redis-db-index
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.backofficeApiKey | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
      FRONTEGG_REDSHIFT_HOSTNAME={{ $secret.databases.redshift.host | toYaml }}
      FRONTEGG_REDSHIFT_USERNAME={{ $secret.databases.redshift.userName | toYaml }}
      FRONTEGG_REDSHIFT_PASSWORD={{ $secret.databases.redshift.password | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_TENANTS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
      FRONTEGG_BACKOFFICE_SERVICE_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
    additionalSecrets: ""

  cronjobs:
    aggregate-uav:
      enabled: true
      command: ["npm"]
      args: ["run", "aggregate-users-accounts-visits"]
      schedule: "0 0 * * *"
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
      ttlSecondsAfterFinished: 86400
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 3
      successfulJobsHistoryLimit: 3
      restartPolicy: Never
    aggregate-av:
      enabled: true
      command: ["npm"]
      args: ["run", "aggregate-accounts-visits"]
      schedule: "0 0 * * *"
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
      ttlSecondsAfterFinished: 86400
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 3
      successfulJobsHistoryLimit: 3
      restartPolicy: Never

audits-service:
  name: audits
  team: frontegg
  envID: *envId
  appVersion: 20454c7
  image:
    repository: frontegg/audits-service
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    service:
      ports:
        - port: 80
          targetPort: 3002
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3002
    resources:
      requests:
        cpu: 512m
        memory: 2Gi
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_SERVICE_NAME: audits-service
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_USE_FIREHOSE_ANALYTICS: "true"
      FRONTEGG_PORT: "3002"
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
      FRONTEGG_SPLIT_IO_LOCAL_CONFIG_FILE: /etc/config/settings.yaml
      LOG_LEVEL: verbose
  configuration:
    map:
      config-center:
        FRONTEGG_METADATA_SERVICE_URL: metadata-service-url
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_AUDITS_TOPIC_NAME: audits-topic-name
        FRONTEGG_AUDITS_DB_TYPE: audits-db-type
        FRONTEGG_AUDITS_DB_NAME: audits-db-name
        FRONTEGG_METADATA_SERVICE_FETCH_PUBSUB_STRATEGY: metadata-service-fetch-pubsub-strategy
        FRONTEGG_METADATA_SERVICE_TOPIC_NAME: metadata-service-topic-name
        FRONTEGG_AUDITS_SERVICE_REDIS_DB_INDEX: audits-service-redis-db-index
        FRONTEGG_AUDITS_KAFKA_RETRY_COUNT: audits-kafka-retry-count
        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml}}
      FRONTEGG_AUDITS_MYSQL_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
      FRONTEGG_AUDITS_MYSQL_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
      FRONTEGG_AUDITS_MYSQL_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
      FRONTEGG_AUDITS_MYSQL_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
      FRONTEGG_AUDITS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.auditsServiceApiKey | toYaml }}
      FRONTEGG_METADATA_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
      FRONTEGG_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_AUDITS_DB_HOST={{ $secret.databases.generalMysql.host | toYaml }}
      FRONTEGG_AUDITS_DB_USERNAME={{ $secret.databases.generalMysql.username | toYaml }}
      FRONTEGG_AUDITS_DB_PASSWORD={{ $secret.databases.generalMysql.password | toYaml }}
      FRONTEGG_AUDITS_DB_USE_SSL={{ $secret.databases.generalMysql.useSsl | toYaml }}
      FRONTEGG_AUDITS_SERVICE_REDIS_HOST={{ $secret.databases.redis.host | toYaml }}
      FRONTEGG_AUDITS_SERVICE_REDIS_PORT={{ $secret.databases.redis.port | toYaml }}
      FRONTEGG_AUDITS_SERVICE_REDIS_PASSWORD={{ $secret.databases.redis.password | toYaml }}
      FRONTEGG_AUDITS_SERVICE_REDIS_TLS={{ $secret.databases.redis.tls | toYaml }}
      FRONTEGG_METADATA_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_METADATA_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_AUDITS_KAFKA_BROKER_LIST={{ $secret.databases.kafka.brokerList | toYaml }}
      FRONTEGG_AUDITS_KAFKA_SASL_USERNAME={{ $secret.databases.kafka.saslUserName | toYaml }}
      FRONTEGG_AUDITS_KAFKA_SASL_PASSWORD={{ $secret.databases.kafka.saslPassword | toYaml }}
      FRONTEGG_SPLIT_IO_KEY={{ $secret.externalServices.split.sdkKey | toYaml }}
      FRONTEGG_AUDITS_SERVICE_MONGO_URL={{ $secret.databases.mongo.connectionString | toYaml }}
      FRONTEGG_FIREHOSE_ACCESS_KEY_ID={{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
      FRONTEGG_FIREHOSE_SECRET_ACCESS_KEY={{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
      FRONTEGG_AWS_REGION={{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
      FRONTEGG_CLIENT_ID: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
    additionalSecrets: ""

authentication-service:
  name: authentication
  team: frontegg
  envID: *envId
  appVersion: 0b7fb5e
  image:
    repository: frontegg/authentication-service
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 10
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  service:
    type: ClusterIP
    port: 80
    targetPort: 4000
    protocol: TCP
    name: http
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
  configuration:
    map:
      config-center:
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-p1-service-url
        PORTAL_URL: portal-url
        FRONTEGG_COOKIE_DOMAIN: authentication-cookie-domain
        SECURED_COOKIE: authentication-secured-cookie
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml}}
      FRONTEGG_PRIVATE_KEY={{ $secret.frontegg.applications.authentication.authenticationPrivateKey | toYaml }}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_VENDORS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      FRONTEGG_ADMINS_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
      FRONTEGG_IDENTITY_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      FRONTEGG_AUTH_SERVICE_API_KEY={{ $secret.frontegg.apiKeys.authenticationServiceApiKey | toYaml }}
    additionalSecrets: ""

applications-service:
  name: applications
  team: frontegg
  envID: *envId
  appVersion: 3c3f79f
  argoRollouts:
    enabled: false
  image:
    repository: frontegg/applications-service
    prefix: &imagePrefix 527305576865.dkr.ecr.us-east-1.amazonaws.com/docker-hub/
  defaults: *defaultsAnnotations
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3035
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3035
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 40
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    replicaCount: 1
    service:
      ports:
        - port: 80
          targetPort: 3035
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3035
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 60
      periodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_SERVICE_NAME: applications-service
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
      NODE_NO_WARNINGS: "1"
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: "false"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_CDN_BUCKET: cdn-bucket
        FRONTEGG_AWS_REGION: aws-region
        FRONTEGG_CDN_URL: cdn-url
        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      databases:
        mysql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      encryption:
        secret: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
    additionalSecrets: ""

api-gateway:
  name: api-gateway
  team: frontegg
  envID: *envId
  image:
    repository: frontegg/api-gateway
    prefix: *imagePrefix
  appVersion: b940af5
  argoRollouts:
    enabled: false
  defaults: *defaultsAnnotations
  ingresses:
    tesla:
      enabled: true
      ingressClassName: nginx
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: 4m
        nginx.ingress.kubernetes.io/configuration-snippet: |
          more_clear_input_headers "Host" "X-Forwarded-Host";
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded-Host $http_x_forwarded_host;
          proxy_set_header X-Trace-ID $opentelemetry_trace_id;
        nginx.ingress.kubernetes.io/server-snippet: |
          add_header Cache-Control "no-transform";
          location ~* ^/(metrics|healthcheck) {
            deny all;
            return 403;
          }
        nginx.ingress.kubernetes.io/enable-opentelemetry: "true"
      rules:
        - hostname: "*.onprem.backegg.io"
          paths:
            - path: /
              servicePort: 80
              pathType: ImplementationSpecific
  web:
    enabled: true
    command: ["node"]
    args: ["--max-http-header-size=16384", "dist/api-gateway/main"]
    terminationGracePeriodSeconds: 60
    resources:
      requests:
        cpu: 500m
        memory: 2Gi
      limits:
        memory: 2Gi
    service:
      ports:
        - port: 80
          targetPort: 9090
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 9090
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    startupProbe:
      httpGet:
        path: /healthcheck
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["node"]
    args: ["--max-http-header-size=16384", "dist/worker/main"]
    labels:
      scrape-for-metrics: enabled
    service:
      ports:
        - port: 80
          targetPort: 9090
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 9090
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    readinessProbe: {}
    livenessProbe: {}
    startupProbe: {}
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: "production"
      FRONTEGG_METRICS_ENABLED: "false"
      FRONTEGG_JAEGER_ENABLED: "true"
      NODE_ENV: "production"
      #LOG_LEVEL: "verbose"
      LOG_LEVEL: "debug"
      #SENTRY_ENABLED: "true"
      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: "false"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_AUDITS_SERVICE_URL: audits-service-url
        FRONTEGG_AUTHENTICATION_SERVICE_URL: authentication-service-url
        FRONTEGG_METADATA_SERVICE_URL: metadata-service-url
        FRONTEGG_NOTIFICATION_SERVICE_URL: notification-service-url
        FRONTEGG_REPORTS_ENGINE_URL: reports-engine-url
        FRONTEGG_REPORTS_SERVICE_URL: reports-service-url
        FRONTEGG_TEAM_SERVICE_URL: team-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_ENV_DUPLICATOR_URL: env-duplicator-service-url
        FRONTEGG_USAGE_TRACKING_URL: usage-tracking-service-url
        FRONTEGG_TENANT_SERVICE_URL: tenants-service-url
        FRONTEGG_WEBPUSH_SERVICE_URL: webpush-service-url
        FRONTEGG_WEBHOOK_SERVICE_URL: webhook-service-url
        FRONTEGG_EVENT_SERVICE_URL: events-service-url
        FRONTEGG_INTEGRATIONS_SERVICE_URL: integrations-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_IDENTITY_P1_SERVICE_URL: identity-p1-service-url
        FRONTEGG_OAUTH_SERVICE_URL: oauth-service-url
        FRONTEGG_POLICY_SERVICE_URL: policy-service-url
        FRONTEGG_SUBSCRIPTIONS_SERVICE_URL: subscriptions-service-url
        FRONTEGG_PREHOOK_SERVICE_URL: prehook-service-url
        FRONTEGG_DASHBOARD_ENV_BUILDER_URL: dashboard-env-builder-url
        FRONTEGG_BACKOFFICE_SERVICE_URL: backoffice-service-url
        FRONTEGG_PRICING_VIEWS_URL: pricing-views-url
        FRONTEGG_DIRECTORY_SERVICE_URL: directory-service-url
        FRONTEGG_LOGS_SERVICE_URL: logs-service-url
        FRONTEGG_LOGS_STREAMING_SERVICE_URL: logs-streaming-service-url
        FRONTEGG_ENTITLEMENTS_SERVICE_URL: entitlements-service-url
        FRONTEGG_SECURITY_ENGINES_SERVICE_URL: security-engines-url
        FRONTEGG_APPLICATIONS_SERVICE_URL: applications-service-url
        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
        FRONTEGG_SECURITY_CENTER_SERVICE_URL: security-center-service-url
        FRONTEGG_SIGNALS_SERVICE_URL: signals-service-url
        FRONTEGG_AUTH_HUB_URL: auth-hub-service-url
        FRONTEGG_NLP_EXECUTION_ASSISTANT_URL: nlp-execution-assistant-url
        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
        FRONTEGG_APP_INTEGRATIONS_SERVICE_URL: app-integrations-url
        CORS_ORIGINS: cors-origin
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_USAGE_REPORTING_ENABLED: api-gateway-usage-reporting-enabled
        FRONTEGG_USAGE_REPORTING_KAFKA_TOPIC_NAME: tenants-usage-reporting-topic-name
        FRONTEGG_METRICS_ENABLED: api-gateway-metrics-enabled
        FRONTEGG_ENABLE_MULTI_HOST: enable-multi-hosts
        FRONTEGG_REDIS_DB_INDEX: api-gateway-redis-db-index
        FRONTEGG_ENABLE_REDIS_STORE: api-gateway-enable-redis-store
        IGNORED_HOSTS: api-gateway-ignore-hosts

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.apiGatewayApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      encryptionSecret: {{ $secret.frontegg.applications.apiGateway.apiGatewayEncryptionSecret | toYaml }}
      customDomains:
        secretHeader: {{ $secret.frontegg.customDomains.secretHeader | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      sentryDsn: {{ $secret.externalServices.sentry.dsn | toYaml }}
      publicKey: {{ $secret.frontegg.xxx.authPublicKey | toYaml }}
      identityPublicKey: {{ $secret.frontegg.applications.identity.publicKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      proxy:
        authentication:
          apiKey: {{ $secret.frontegg.apiKeys.authenticationServiceApiKey | toYaml }}
        vendors:
          apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
        audits:
          apiKey: {{ $secret.frontegg.apiKeys.auditsServiceApiKey | toYaml }}
        team:
          apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
        admins:
          apiKey: {{ $secret.frontegg.apiKeys.adminsServiceApiKey | toYaml }}
        metadata:
          apiKey: {{ $secret.frontegg.apiKeys.metadataServiceApiKey | toYaml }}
        reportsService:
          apiKey: {{ $secret.frontegg.apiKeys.reportsServiceApiKey | toYaml }}
        reportsEngine:
          apiKey: {{ $secret.frontegg.apiKeys.reportsEngineApiKey | toYaml }}
        notifications:
          apiKey: {{ $secret.frontegg.apiKeys.notificationServiceApiKey | toYaml }}
        webpush:
          apiKey: {{ $secret.frontegg.apiKeys.webpushServiceApiKey | toYaml }}
        events:
          apiKey: {{ $secret.frontegg.apiKeys.eventsServiceApiKey | toYaml }}
        webhooks:
          apiKey: {{ $secret.frontegg.apiKeys.webhooksServiceApiKey | toYaml }}
        integrations:
          apiKey: {{ $secret.frontegg.apiKeys.integrationsServiceApiKey | toYaml }}
        tenants:
          apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        identity:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        subscriptions:
          apiKey: {{ $secret.frontegg.apiKeys.subscriptionsServiceApiKey | toYaml }}
        oauth:
          apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
        policy:
          apiKey: {{ $secret.frontegg.apiKeys.policyServiceApiKey | toYaml }}
        prehooks:
          apiKey: {{ $secret.frontegg.apiKeys.prehookApiKey | toYaml }}
        envDuplicator:
          apiKey: {{ $secret.frontegg.apiKeys.envDuplicatorApiKey | toYaml }}
        usageTracking:
          apiKey: {{ $secret.frontegg.apiKeys.usageTrackingApiKey | toYaml }}
        dashboardEnvBuilder:
          apiKey: {{ $secret.frontegg.apiKeys.dahboardEnvBuilderApiKey | toYaml }}
        backoffice:
          apiKey: {{ $secret.frontegg.apiKeys.backofficeApiKey | toYaml }}
        pricingViews:
          apiKey: {{ $secret.frontegg.apiKeys.pricingViewsApiKey | toYaml }}
        directoryService:
          apiKey: {{ $secret.frontegg.apiKeys.directoryServiceApiKey | toYaml }}
        logsService:
          apiKey: {{ $secret.frontegg.apiKeys.logsServiceApiKey | toYaml }}
        logsStreamingService:
          apiKey: {{ $secret.frontegg.apiKeys.logsStreamingServiceApiKey | toYaml }}
        entitlementsService:
          apiKey: {{ $secret.frontegg.apiKeys.entitlementsServiceApiKey | toYaml }}
        securityEngines:
          apiKey: {{ $secret.frontegg.apiKeys.securityEnginesApiKey | toYaml }}
        securityCenter:
          apiKey: {{ $secret.frontegg.apiKeys.securityCenterServiceApiKey | toYaml }}
        signals:
          apiKey: {{ $secret.frontegg.apiKeys.signalsServiceApiKey | toYaml }}
        applicationsService:
          apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
        customCodeService:
          apiKey: {{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
        authHub:
          apiKey: {{ $secret.frontegg.apiKeys.authHubServiceApiKey | toYaml }}
        nlpExecutionAssistant:
          apiKey: {{ $secret.frontegg.apiKeys.nlpExecutionAssistantApiKey | toYaml }}
        appIntegrationsService:
          apiKey: {{ $secret.frontegg.apiKeys.appIntegrationsApiKey | toYaml }}
    additionalSecrets: ""

identity-service:
  name: identity
  team: frontegg
  envID: *envId
  appVersion: "dbf5e21"
  image:
    repository: frontegg/identity-service
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  #  serviceAccount:
  #    enabled: true
  #    annotations:
  #    nameOverride: identity-sa
  web:
    enabled: true
    command: ["node"]
    args: ["service/dist/deployments/service/main"]
    resources:
      requests:
        cpu: 1000m
        memory: 3Gi
    service:
      ports:
        - port: 80
          targetPort: 3016
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3016
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 60
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    startupProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  hp:
    enabled: true
    command: ["node"]
    args: ["p1-service/dist/main"]
    resources:
      requests:
        cpu: 1000m
        memory: 3Gi
    labels:
      priority: "high"
    service:
      ports:
        - port: 80
          targetPort: 3016
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3016
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 60
    startupProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  worker:
    enabled: true
    command: ["node"]
    args: ["service/dist/deployments/worker/main"]
    labels:
      scrape-for-metrics: enabled
    service:
      ports:
        - port: 80
          targetPort: 3016
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3016
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: identity-service
      NODE_ENV: production
      FRONTEGG_IDENTITY_SERVICE_DB_NAME: frontegg_identity
      FRONTEGG_USE_FIREHOSE_ANALYTICS: "false"
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_TWILIO_SENDER: "+12055578527"
      FRONTEGG_TWILIO_MESSAGING_SID: "MGf49702aad25a6a99b4acf68ad148af03"
      LOG_LEVEL: verbose
      MIGRATION_DIR_PATH: /service/dist/migrations,/service/dist/seeders
      FRONTEGG_CONFIG_DIRECTORY: "/etc/config"
      SENTRY_ENABLED: "false"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
      FRONTEGG_CLOUDFLARE_PURGE_CACHE_ENABLED: "false"
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["node"]
        args:
          [
            "./node_modules/@frontegg/common/dist/utils/text-to-json-output.js",
            "./node_modules/typeorm/cli.js",
            "--dataSource=service/dist/data-sources/production.ormconfig.js",
            "migration:run",
          ]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_REPORTS_ENGINE_URL: reports-engine-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_API_GW_URL: api-gateway-url
        FRONTEGG_PREHOOK_SERVICE_URL: prehook-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_EMAIL_SERVICE_URL: email-service-url
        FRONTEGG_MAX_CONCURRENT_SESSIONS: identity-service-max-concurrent-sessions
        FRONTEGG_IDENTITY_SERVICE_DB_NAME: identity-service-db-name
        FRONTEGG_AUDITS_KAFKA_TOPIC_NAME: identity-service-audit-triggered-topic-name
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_OAUTH_SERVICE_URL: oauth-service-url
        FRONTEGG_SECURITY_ENGINES_SERVICE_URL: security-engines-url
        FRONTEGG_APPLICATIONS_SERVICE_URL: applications-service-url
        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
        FRONTEGG_AUTH_HUB_SERVICE_URL: auth-hub-service-url
        FRONTEGG_CDN_URL: cdn-url
        FRONTEGG_ENTITLEMENTS_AGENT_URL: entitlements-agent-url
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      cryptoKey: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
      cryptoKeyV2: {{ $secret.frontegg.applications.identity.cryptoKeyV2 | toYaml }}
      databases:
        mySql:
            host: {{ $secret.databases.identityMysql.host | toYaml }}
            username: {{ $secret.databases.identityMysql.username | toYaml }}
            password: {{ $secret.databases.identityMysql.password | toYaml }}
            replicaHost: {{ $secret.databases.identityMysql.replicaHost | default "" }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      sharedCache:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      internalServices:
        reportsEngine:
            apiKey: {{ $secret.frontegg.apiKeys.reportsEngineApiKey | toYaml }}
        teamManagement:
            apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
        tenantsService:
            apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        prehookService:
            apiKey: {{ $secret.frontegg.apiKeys.prehookApiKey | toYaml }}
        vendorsService:
            apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
        emailService:
            apiKey: {{ $secret.frontegg.apiKeys.emailServiceApiKey | toYaml }}
        oauthService:
            apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
        securityEngines:
            apiKey: {{ $secret.frontegg.apiKeys.securityEnginesApiKey | toYaml }}
        applicationsService:
            apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
        customCodeService:
            apiKey: {{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
        authHubService:
            apiKey: {{ $secret.frontegg.apiKeys.authHubServiceApiKey | toYaml }}
      sendGrid:
        apiKey: {{ $secret.externalServices.sendgrid.ApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      oidc:
        google:
          clientId: {{ $secret.frontegg.applications.identity.google.clientId | toYaml }}
          clientSecret: {{ $secret.frontegg.applications.identity.google.clientSecret | toYaml }}
        github:
          clientId: {{ $secret.frontegg.applications.identity.github.clientId | toYaml }}
          clientSecret: {{ $secret.frontegg.applications.identity.github.clientSecret | toYaml }}
        microsoft:
          clientId: {{ $secret.frontegg.applications.identity.microsoft.clientId | toYaml }}
          clientSecret: {{ $secret.frontegg.applications.identity.microsoft.clientSecret | toYaml }}
        facebook:
          clientId: {{ $secret.frontegg.applications.identity.facebook.clientId | toYaml }}
          clientSecret: {{ $secret.frontegg.applications.identity.facebook.clientSecret | toYaml }}
        slack:
          clientId: {{ $secret.frontegg.applications.identity.slack.clientId | toYaml }}
          clientSecret: {{ $secret.frontegg.applications.identity.slack.clientSecret | toYaml }}
        apple:
          clientId: {{ $secret.frontegg.applications.identity.apple.AppleClientId | toYaml }}
          clientPrivateKey: {{ $secret.frontegg.applications.identity.apple.ApplePrivateKey | trim | toJson }}
          teamId: {{ $secret.frontegg.applications.identity.apple.AppleTeamId | toYaml }}
          keyId: {{ $secret.frontegg.applications.identity.apple.AppleKeyId | toYaml }}
      twilio:
        token: {{ $secret.externalServices.twilio.token | toYaml }}
        accountsId: {{ $secret.externalServices.twilio.accountId | toYaml }}
      session:
        secret: {{ $secret.frontegg.applications.identity.facebook.SessionSecret | toYaml }}
      aws:
        region: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
        credentials:
          accessKeyId: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
          secretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
      cloudflare:
        cdn:
          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}
    additionalSecrets: ""

oauth-service:
  name: oauth
  team: frontegg
  envID: *envId
  appVersion: venv-6b82216
  image:
    repository: frontegg/oauth-service
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    resources:
      requests:
        cpu: 750m
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3018
          protocol: TCP
          name: access-port
    ports:
      - name: access-port
        containerPort: 3018
    autoscaling:
      enabled: true
      scaledObject:
        enabled: false
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    readinessProbe:
      httpGet:
        path: /health
        port: access-port
      initialDelaySeconds: 40
      periodSeconds: 5
      failureThreshold: 1
    livenessProbe:
      httpGet:
        path: /health
        port: access-port
      initialDelaySeconds: 40
      periodSeconds: 20
    terminationGracePeriodSeconds: 60
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: oauth-service
      NODE_ENV: production
      FRONTEGG_OAUTH_SESSION_TIMEOUT: "86400"
      FRONTEGG_JAEGER_ENABLED: "true"
      LOG_LEVEL: "verbose"
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
      SENTRY_ENABLED: "false"
      FRONTEGG_CDN_URL: "https://frontegg-prod.onprem.backegg.io/oauth"
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: "false"
      FRONTEGG_USE_FRONTEND_STATIC_FILES: "true"
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
  #    upload-assets:
  #      enabled: true
  #      spec:
  #        command: [ "/bin/sh" ]
  #        args: [ "./s3-assets-upload.sh" ]
  #        resources:
  #          requests:
  #            cpu: 500m
  #            memory: 500Mi
  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        FRONTEGG_API_GATEWAY_URL: api-gateway-url
        FRONTEGG_API_GATEWAY_INTERNAL_URL: api-gateway-internal-url
        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
        FRONTEGG_IDENTITY_SERVICE_URL: identity-p1-service-url
        FRONTEGG_APPLICATIONS_SERVICE_URL: applications-service-url
        FRONTEGG_TEAM_MANAGEMENT_URL: team-service-url
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_AUTH_HUB_SERVICE_URL: auth-hub-service-url
        FRONTEGG_OAUTH_SERVICE_DB_NAME: oauth-service-db-name
        FRONTEGG_OAUTH_SERVICE_REDIS_DB_INDEX: oauth-service-redis-db-index
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_CDN_URL: dashboard-cdn-url
        FRONTEGG_CDN_BUCKET: cdn-bucket
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      apiKey: {{ $secret.frontegg.apiKeys.oauthServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      databases:
        mySql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          ssl: {{ $secret.databases.generalMysql.useSsl | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      cryptoKey: {{ $secret.frontegg.applications.oauth.oauthServiceCryptoKey | toYaml }}
      identityCryptoKey: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
      oauthServiceSigningKey: {{ $secret.frontegg.applications.oauth.oauthServiceSigningKey | toYaml }}
      internalServices:
        identity:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        applications:
          apiKey: {{ $secret.frontegg.apiKeys.applicationsServiceApiKey | toYaml }}
        teamManagement:
          apiKey: {{ $secret.frontegg.apiKeys.teamManagementApiKey | toYaml }}
        tenantsService:
          apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        vendors:
          apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
        authHubService:
          apiKey: {{ $secret.frontegg.apiKeys.authHubServiceApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
    additionalSecrets: ""

configCenter:
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-100"

  externalServices:
    secrets:
      url: ""
    iot:
      topic: ""
    aws:
      region: "us-east-1"
      componentsCollectionIdentifier: ""
  frontegg:
    general:
      envID: *envId # Add this line to reference the existing anchor
      analytics:
        segmentAnalyticsEnabled: "false"
        useFirehoseAnalytics: "false"
      portalUrl: "https://portal.onprem.backegg.io"
      corsOrigin: "https://portal.onprem.backegg.io"
      portalV1Url: ""
      customDomainCloudflareEndpoint: ""
      tracingCollectorEndpoint: "http://logzio-otel-traces.observability.svc.cluster.local:14268/api/traces"
      idgwApplicationId: ""
      splitioProxyEndpoint: "http://split-proxy-v2-web.feature-management.svc.cluster.local"
    applications:
      audits:
        auditsTopicName: "audits-v1"
        auditsDbType: "mysql"
        auditsDbName: "frontegg_audits"
        metadataServiceFetchPubsubStrategy: "true"
        metadataServiceTopicName: "METADATA_UPDATED"
        auditsServiceRedisDbIndex: "2"
        auditsKafkaRetryCount: "3"
      authentication:
        authenticationCookieDomain: ""
        authenticationSecuredCookie: ""
      apiGateway:
        apiGatewayUsageReportingEnabled: ""
        apiGatewayMetricsEnabled: ""
        apiGatewayRedisDbIndex: "9"
        enableMultiHosts: "true" # TODO WHAT IS THIS PURPOSE
        apiGatewayEnableRateLimiters: ""
        apiGatewayEnableRedisStore: ""
        apiGatewayIgnoredHosts: "api.onprem.backegg.io" # DYANMICALLY SET
        redirectEnabled: "false"
        redirectUrl: ""
      connectorsWorker:
        connectorsWorkerServiceRedisDbIndex: "5"
      dashboard:
        mixpanelId: ""
        dashboardHubspotEnabled: "false"
        dashboardDevrevEnabled: "false"
        devrevApiUrl: "https://api.devrev.ai"
        dashboardDomainSuffix: ""
        cdnUrl: "https://frontegg-prod.onprem.backegg.io/oauth"
        cdnBucket: "dashboard-static-content-ebdiwxwk"
        backofficeViewerRoleId: ""
        backofficeEditorRoleId: ""
        fronteggUiEventsUrl: "https://ui-events.frontegg.com"
      events:
        eventsServiceRedisDbIndex: "7"
      identity:
        identityServiceDbName: "frontegg_identity"
        identityServiceAuditTriggeredTopicName: "AUDIT_TRIGGERED"
        identityServiceMaxConcurrentSessions: "100"
      metadata:
        metadataServiceDbConnectionTimeoutMs: "30000"
        metadataServiceDbConnectionRetryAttempts: "3"
        metadataServiceDbConnectionRetryDelay: "1000"
        metadataServiceRedisDbIndex: "0"
        metadataServiceIpStackUrl: "http://api.ipstack.com"
      notifications:
        eventsPubsubTopic: "events"
      reportingEngine:
        assetBlobStorageContainerName: "vendor-assets"
        reportingEngineApproversNotificationEmailTemplateId:
        iotRedisDbIndex: "4"
        iotRedisRecordTtlSeconds: "600"
        iotRedisMaxPollTimeoutMs: "60000"
        iotRedisPollIntervalMs: "1000"
        bucketUrl: ""
      reportsScheduler:
        reportingServiceFetchPubsubStrategy: "true"
        reportingServiceTopicName: "reporting-changes"
      subscription:
        stripeRegion: "eu"
        defaultStripeRegion: "eu"
      teamManagement:
        teamManagementServiceDbName: "frontegg_team_management"
        teamManagementServiceRedisDbIndex: "1"
        teamManagementServiceAuthorizationTopicName: "authorization-v1"
      tenants:
        tenantsUsageReportingTopicName: "usage-reporting-v1"
        tenantsRedisDbIndex: "8"
        tenantsServiceMysqlDbName: "frontegg_tenants"
        tenantAssetsS3Bucket: ""
        tenantAssetsS3Url: "https://{{ $.Values.configCenter.externalServices.aws.componentsCollectionIdentifier }}-tenants-assets.s3.{{ $.Values.configCenter.externalServices.aws.region }}.amazonaws.com"
        s3:
          tenantsServiceAwsEndpoint: ""
          tenantsServiceTenantAssetsS3Endpoint: ""
      customCode:
        lambda:
          management:
            roleArn: ""
          execution:
            roleArn: ""
            defaultPolicies: ""
          environment:
            variables:
              cxDomain: ""
          layers: ""
      vendors:
        vendorsServiceMysqlDbName: "frontegg_vendors"
        vendorsAssetBlobStorageContainerName: "public-vendor-assets"
        vendorsServiceVendorsDomain: "onprem.backegg.io" #TODO: DYAMICALLY SET
        customDomainClusterIngressClass: "nginx"
        customDomainClusterIssuerName: "letsencrypt"
        customDomainClusterDefaultPort: "443"
        customDomainClusteNamespace: "custom-domains"
        customDomainSslEndpoint: ""
        customDomainCloudflareTransformRuleSetId: "xxxx"
        customDomainCloudflareOriginRuleSetId: "xxxx"
        kafkaVendorsTopic: "vendors-v1"
      webhooks:
        webhookServiceMongodbConnectionRetryAttempts: "3"
        webhookServiceMongodbConnectionRetryDelay: "1000"
        webhookMysqlDbName: "frontegg_webhooks"
        proxyEnabled: "true"
      webpush:
        webpushMongodbConnectionRetryAttempts: "3"
        webpushMongodbConnectionRetryDelay: "1000"
      sidekick:
        sidekickAllowedOrigin: "*"
        sidekickTenantId: ""
      dataIngest:
        dataIngestDbSchema: "frontegg_ingest"
        dataIngestKafkaTopic: "usage-reporting-v1"
        dataIngestKafkaVendorsTopic: "vendors-v1"
      pqlProcess:
        pqlProcessHubspotEnableCompaniesSync: ""
        pqlProcessHubspotEnableReporting: ""
      oauth:
        oauthServiceDbName: "frontegg_oauth"
        oauthServiceRedisDbIndex: "10"
      envDuplicator:
        configCopyResultTopicName: "configuration-copy-result-v1"
        configCopyTopicName: "configuration-copy-v1"
        dbName: "frontegg_env_duplicator"
      backoffice:
        redis:
          redisDbIndex: "12"
      entitlements:
        redisDBIndex: "12"
        vendorSnapshotJobDelayMS: "10000"
        vendorSnapshotJobAttempts: "3"
        opaPolicyBucket: "prod-policy20250505093256548900000004" # TODO DYNAMICALLY SET
      forwardProxy:
        isAuthRequired: "false"
        host: "forward-proxy-v2-web"
        port: "8080"
        protocol: "http"

    services:
      nlpExecutionAssistantUrl: "http://nlp-execution-assistant-v2-web"
      anomalyDetectionUrl: "http://anomaly-detection-v2-web"
      idgwBackendUrl: "http://idgw-backend-web"
      mcpServerUrl: "http://mcp-server-web"
      appIntegrationsUrl: "http://app-integrations-web"
      authenticationServiceUrl: "http://frontegg-authentication-service" # TODO this should be deleted from services like api gateway
      notificationServiceUrl: "http://frontegg-notification-service" # TODO this should be deleted from services like api gateway
      identityServiceUrl: "http://identity-v2-web"
      identityP1ServiceUrl: "http://identity-v2-hp"
      apiGatewayInternalUrl: "http://api-gateway-v2-web"
      oauthServiceUrl: "http://oauth-v2-web"
      vendorsServiceUrl: "http://vendors-v2-web"
      signalsServiceUrl: "http://signals-v2-web"
      auditsServiceUrl: "http://audits-v2-web"
      eventsServiceUrl: "http://events-v2-web"
      integrationsServiceUrl: "http://integrations-v2-web"
      applicationsServiceUrl: "http://applications-v2-web"
      cdnUrl: "https://us-east-1.console.aws.amazon.com/s3/buckets/dashboard-static-content-zzrhbrsu"
      adminsServiceUrl: "http://admins-v2-web"
      subscriptionsServiceUrl: "http://subscriptions-v2-web"
      teamServiceUrl: "http://team-management-v2-web"
      tenantsServiceUrl: "http://tenants-v2-web"
      webhookServiceUrl: "http://webhooks-v2-web"
      metadataServiceUrl: "http://metadata-v2-web"
      prehookServiceUrl: "http://prehooks-v2-web"
      backofficeUrl: "http://backoffice-v2-web"
      emailServiceUrl: "http://email-v2-web"
      dashboardEnvBuilderUrl: "http://dashboard-env-builder-v2-web"
      envDuplicatorUrl: "http://env-duplicator-v2-web"
      entitlementsServiceUrl: "http://entitlements-v2-web"
      securityEnginesUrl: "http://security-engines-v2-web"
      entitlementsAgentUrl: "http://entitlements-agent-v2-web"
      securityCenterServiceUrl: "http://security-center-v2-web"
      webpushServiceUrl: "http://frontegg-webpush-service"
      directoryServiceUrl: "http://directory-v2-web"
      logsServiceUrl: "http://logs-v2-web"
      policyServiceUrl: "http://policy-v2-web"
      reportsEngineUrl: "http://reporting-engine-v2-web"
      reportsServiceUrl: "http://reporting-v2-web"
      usageTrackingUrl: "http://usage-tracking-v2-web"
      customCodeServiceUrl: "http://custom-code-v2-web"
      logsStreamingServiceUrl: "http://log-stream-v2-web"
      pricingViewsUrl: "http://pricing-views-v2-web"
      authHubServiceUrl: "http://auth-hub-v2-web"
      apiGatewayUrl: "https://api.onprem.backegg.io" #TODO SET THIS ON INSTALL
      fronteggVendorHost: "frontegg-prod.onprem.backegg.io" #should be modified for customer

task-master:
  name: task-master
  team: adoption
  envID: *envId
  appVersion: 517e48a
  image:
    repository: frontegg/task-master
    prefix: *imagePrefix
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  web:
    enabled: true
    service:
      ports:
        - port: 80
          targetPort: 3024
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3024
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 20
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 5
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: task-master
      NODE_ENV: production
      FRONTEGG_TENANTS_KAFKA_TOPIC_NAME: tenants-v1
      FRONTEGG_TASKMASTER_SERVICE_ENCRYPT_ALGORITHM: aes-256-cbc
      FRONTEGG_TASKMASTER_SERVICE_DB_NAME: FRONTEGG_TASKMASTER
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_IDENTITY_SERVICE_DB_NAME: frontegg_identity
      FRONTEGG_BACKOFFICE_SERVICE_DB_NAME: frontegg_backoffice
      FRONTEGG_VENDOR_SERVICE_DB_NAME: frontegg_vendors
      FRONTEGG_TENANTS_SERVICE_DB_NAME: frontegg_tenants
      FRONTEGG_ENTITLEMENTS_SERVICE_DB_NAME: frontegg_entitlements
      FRONTEGG_DASHBOARD_ENV_BUILDER_DB_NAME: frontegg_dashboard_env_builder
      FRONTEGG_TEAM_MANAGEMENT_DB_NAME: frontegg_team_management
      FRONTEGG_SUBSCRIPTIONS_DB_NAME: frontegg_subscriptions
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
  configuration:
    map:
      config-center:
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        IDENTITY_SERVICE_DB_NAME: identity-service-db-name
        FRONTEGG_API_GW_URL: api-gateway-url
        FRONTEGG_AUDITS_SERVICE_URL: audits-service-url
        FRONTEGG_WEBHOOK_SERVICE_URL: webhook-service-url
        FRONTEGG_DIRECTORY_SERVICE_URL: directory-service-url
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_LOGS_STREAMING_SERVICE_URL: logs-streaming-service-url
        FRONTEGG_CUSTOM_CODE_SERVICE_URL: custom-code-service-url
        FRONTEGG_VENDORS_DOMAIN: vendors-service-vendors-domain
        FRONTEGG_TENANTS_SERVICE_URL: tenants-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_CDN_URL: cdn-url
        FRONTEGG_AWS_REGION: aws-region
        FRONTEGG_CDN_BUCKET: cdn-bucket
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml}}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      fronteggApiKey: {{ $secret.frontegg.xxx.fronteggApiKey | toYaml }}
      authPublicKey: {{ $secret.frontegg.xxx.authPublicKey | toYaml }}
      fronteggPrivateKey: {{ $secret.frontegg.applications.authentication.authenticationPrivateKey | toYaml }}
      identityCryptoKey: {{ $secret.frontegg.applications.identity.cryptoKey | toYaml }}
      logsStreamingCryptoKey: {{ $secret.frontegg.applications.logsStreaming.cryptoKey | toYaml }}
      apiKeyEncryptionSecret: {{ $secret.frontegg.applications.vendors.apiKeySecret | toYaml }}
      prehookSecret: {{ $secret.frontegg.applications.vendors.prehookSecret | toYaml }}
      splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
      oauthCryptoKey: {{ $secret.frontegg.applications.oauth.oauthServiceCryptoKey | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      sharedCache:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      internalServices:
        audits:
          apiKey: {{ $secret.frontegg.apiKeys.auditsServiceApiKey | toYaml }}
        webhook:
          apiKey: {{ $secret.frontegg.apiKeys.webhooksServiceApiKey | toYaml }}
        logsStreaming:
          apiKey: {{ $secret.frontegg.apiKeys.logsStreamingServiceApiKey | toYaml }}
        customCode:
          apiKey: {{ $secret.frontegg.apiKeys.customCodeServiceApiKey | toYaml }}
        directory:
          apiKey: {{ $secret.frontegg.apiKeys.directoryServiceApiKey | toYaml }}
        identity:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
        tenants:
          apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
        vendors:
          apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
      database:
        identity:
          host: {{ $secret.databases.identityMysql.host | toYaml }}
          username: {{ $secret.databases.identityMysql.username | toYaml }}
          password: {{ $secret.databases.identityMysql.password | toYaml }}
          useSSL: {{ $secret.databases.identityMysql.useSsl | toYaml }}
        backoffice:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        vendors:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        tenants:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        entitlements:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}        
        dashboardEnvBuilder:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        securityEngines:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        teamManagement:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        subscriptions:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        logsStreaming:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        webhook:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        eventRetry:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        applications:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        oauth:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
        customCode:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
          useSSL: {{ $secret.databases.generalMysql.useSsl | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      mongodb:
        url: {{ $secret.databases.mongo.connectionString | toYaml }}
      mongo6:
        url: {{ $secret.databases.mongo6.connectionString | toYaml }}
      customDomainSettings:
        credentials:
          clusterContextString: {{ $secret.frontegg.applications.vendors.customDomains.clusterContext | toYaml }}
      encryption:
        secret: {{ $secret.frontegg.applications.directory.directoryServiceEncryptionKey | toYaml }}

    additionalSecrets: ""

dashboard:
  name: dashboard
  team: adoption
  envID: *envId
  appVersion: f16bbf7
  defaults: *defaultsAnnotations
  argoRollouts:
    enabled: false
  image:
    repository: frontegg/dashboard
    prefix: *imagePrefix
  imagePullSecrets:
    - name: regcred

  ingresses:
    tesla:
      enabled: true
      ingressClassName: nginx
      hostname: "portal.onprem.backegg.io"
      service:
        name: '{{ include "web.name" $ }}'
        port: 80
      annotations:
        nginx.ingress.kubernetes.io/server-snippet: |
          location ~* ^/(metrics|health) {
            deny all;
            return 403;
          }

  web:
    enabled: true
    command: ["/bin/sh"]
    args: ["./entrypoint.sh"]
    service:
      ports:
        - port: 80
          targetPort: 8080
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 8080
    resources:
      requests:
        cpu: 500m
        memory: 300Mi
      limits:
        memory: 500Mi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 20
    additionalVolumeMounts: *additionalVolumeMounts
    additionalVolumes: *additionalVolumes
  configmap:
    data:
      ALLOWED_IPS: "*"
      NODE_ENV: production
      CLOUD_ENVIRONMENT: dev
      REACT_APP_FRONTEGG_PRICING_URL: dev
      REACT_APP_FRONTEGG_PRICING_TEMPLATE_ID: dev
      FRONTEGG_CONFIG_FILE_PATH: "/etc/config/config.env"
      # Based on entitlements.plans-migration
      FRONTEGG_FREEMIUM_PLAN_ID: 6d239555-9565-4203-8df6-93fbf8646acf
      FRONTEGG_TRIAL_PLAN_ID: 45c572c1-15ed-4ffd-ab28-c9a6449ecebc
      FRONTEGG_SPLITIO_FILE_CONFIG_PATH: /etc/config/settings.yaml
      #FRONTEGG_CDN_URL: "https://portal.onprem.backegg.io"

  configuration:
    map:
      config-center:
        FRONTEGG_ENV_ID: env-id
        PUBLIC_URL: portal-url
        CORS_ORIGIN: cors-origin
        FRONTEGG_API_GATEWAY_URL: api-gateway-url
        FRONTEGG_LEGACY_DASHBOARD_URL: portal-v1-url
        #FRONTEGG_CDN_URL: dashboard-cdn-url
        FRONTEGG_DEVREV_API_BASE_URL: devrev-api-url
        FRONTEGG_VENDOR_HOST: frontegg-vendor-host
        FRONTEGG_CDN_BUCKET: cdn-bucket #staging-group-dashboard-static-content
        FRONTEGG_HUBSPOT_ENABLED: dashboard-hubspot-enabled
        FRONTEGG_DEVREV_ENABLED: dashboard-devrev-enabled
        FRONTEGG_DOMAIN_SUFFIX: dashboard-domain-suffix
        #REACT_APP_FRONTEGG_PRICING_URL: react-app-frontegg-pricing-url
        #REACT_APP_FRONTEGG_PRICING_TEMPLATE_ID: react-app-frontegg-pricing-template-id
        FRONTEGG_BACKOFFICE_VIEWER_ROLE_ID: backoffice-viewer-role-id
        FRONTEGG_BACKOFFICE_EDITOR_ROLE_ID: backoffice-editor-role-id
        FRONTEGG_UI_EVENTS_URL: frontegg-ui-events-url

        #SPLIT_CLIENT_ID={{ $secret.externalServices.split.clientId | toYaml }}

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.env
    text: |
      {{- $secret := .contents | fromYaml}}
      FRONTEGG_CLIENT_ID={{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      FRONTEGG_API_KEY={{ $secret.frontegg.xxx.fronteggApiKey | toYaml }}
      FRONTEGG_AUTH_PUBLIC_KEY={{ $secret.frontegg.applications.identity.publicKey | toYaml }}
    additionalSecrets: ""
  #  SENTRY_DSN={{ $secret.externalServices.sentry.dsn | toYaml }}
  #  GITBOOK_AUTH_TOKEN={{ $secret.externalServices.gitbook.authToken | toYaml }}
  #  FRONTEGG_HUBSPOT_ACCESS_TOKEN={{ $secret.externalServices.hubspot.accessToken | toYaml }}
  #  FRONTEGG_DEVREV_AAT={{ $secret.externalServices.devrev.accessToken | toYaml }}
  #  FRONTEGG_HUBSPOT_FORM_ID={{ $secret.externalServices.hubspot.formId | toYaml }}
  #  FRONTEGG_HUBSPOT_PORTAL_ID={{ $secret.externalServices.hubspot.portalId | toYaml }}
  cronjobs:
    restart:
      enabled: false
      name: dashboard-deplopyment-restart
      role: '{{ include "name" $ }}'
      roleBinding: '{{ include "name" $ }}'
      schedule: "0 0 * * *"
      image: bitnami/kubectl
      command:
        - bash
        - -c
        - >-
          kubectl rollout restart deployment/{{ include "web.name" $ }} &&
          kubectl rollout status deployment/{{ include "web.name" $ }}

  jobs:
    upload-assets:
      enabled: false
      spec:
        command: ["/bin/sh"]
        args: ["./s3-assets-upload.sh"]
        resources:
          requests:
            cpu: 500m
            memory: 500Mi

  prometheusRule:
    enabled: false

  serviceAccount:
    enabled: true

  additionalTemplates: |
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: {{ include "name" $ }}
      labels:
        {{- include "labels" . | nindent 4 }}
    rules:
      - apiGroups: ["apps", "extensions"]
        resources: ["deployments"]
        resourceNames: ["{{ include "web.name" $ }}"]
        verbs: ["get", "patch", "list", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: {{ include "name" $ }}
      labels:
        {{- include "labels" . | nindent 4 }}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: {{ include "name" $ }}
    subjects:
      - kind: ServiceAccount
        name: {{ include "name" $ }}

  additionalResources: |
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: {{ include "name" $ }}
      labels:
        {{- include "labels" . | nindent 4 }}
    rules:
      - apiGroups: ["apps", "extensions"]
        resources: ["deployments"]
        resourceNames: ["{{ include "web.name" $ }}"]
        verbs: ["get", "patch", "list", "watch"]
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: {{ include "name" $ }}
      labels:
        {{- include "labels" . | nindent 4 }}
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: {{ include "name" $ }}
    subjects:
      - kind: ServiceAccount
        name: {{ include "name" $ }}

email-service:
  name: email
  team: core
  envID: *envId
  appVersion: dbaac1e
  defaults: *defaultsAnnotations
  image:
    repository: frontegg/email-service
    prefix: *imagePrefix
  imagePullSecrets:
    - name: regcred
  argoRollouts:
    enabled: false
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    service:
      ports:
        - port: 80
          targetPort: 3028
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3028
    resources:
      requests:
        cpu: 250m
        memory: 400Mi
      limits:
        memory: 500Mi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 70
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 20
      periodSeconds: 5
    livenessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 20
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    service:
      ports:
        - port: 80
          targetPort: 3028
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3028
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 30
    readinessProbe:
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 30
      periodSeconds: 5
  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      FRONTEGG_SERVICE_NAME: email-service
      NODE_ENV: production
      FRONTEGG_CONFIG_DIRECTORY: /etc/config
  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.emailServiceApiKey | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      internalServices:
        vendors:
          apiKey: {{ $secret.frontegg.apiKeys.vendorsServiceApiKey | toYaml }}
        identity:
          apiKey: {{ $secret.frontegg.apiKeys.identityServiceApiKey | toYaml }}
      sendGrid:
        apiKey: {{ $secret.externalServices.sendgrid.ApiKey | toYaml }}

    additionalSecrets: ""
  configuration:
    map:
      config-center:
        FRONTEGG_IDENTITY_SERVICE_URL: identity-service-url
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
