# Default values for fuc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
team: core

componentsCollectionIdentifier: local

minReplicasOverride:
  prd-ap-se2:
    minReplicas: 3

replicaCount: 1
appVersion: master-latest
argoRollouts: true

offline:
  enabled: true
  podAnnotations:
    linkerd.io/inject: enabled
  replicaCount: 1
  nodeSelector:
    workload: general
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
  # handles restart
  livenessProbe:
    failureThreshold: 5
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 60
    periodSeconds: 60

  # decides when to forward requests
  readinessProbe:
    failureThreshold: 1
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5

image:
  repository: frontegg/tenants-service
  pullPolicy: Always

imagePullSecrets:
  - name: regcred

nameOverride: ""
fullnameOverride: ""

podAnnotations:
  linkerd.io/inject: enabled

podSecurityContext: {}
# fsGroup: 2000

service:
  type: ClusterIP
  port: 80
  targetPort: 3015
  protocol: TCP
  name: http

jobs:
  migrate:
    enabled: true
    metadata:
      annotations:
        argocd.argoproj.io/sync-wave: "-500"
    spec:
      annotations: {}
      args:
        - "/bin/bash"
        - "./run-migrations.sh"
      resources:
        requests:
          cpu: 300m
          memory: 500Mi

resources:
  requests:
    cpu: 500m
    memory: 1Gi
  limits:
    memory: 1Gi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 75

# handles restart (not offline)
livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 40
  periodSeconds: 60

# decides when to forward requests (not offline)
readinessProbe:
  failureThreshold: 1
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

nodeSelector:
  agentpool: agentpool

tolerations: []

affinity: {}

configmap:
  data:
    CLOUD_ENVIRONMENT: dev
    NODE_ENV: production
    FRONTEGG_JAEGER_ENABLED: "true"
    FRONTEGG_ANALYTICS_TYPE: firehose
    LOG_LEVEL: verbose

configuration:
  map:
    config-center:
      FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
      FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
      FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
      FRONTEGG_TENANT_ASSETS_S3_BUCKET: tenant-assets-s3-bucket
      FRONTEGG_TENANTS_SERVICE_MYSQL_DB_NAME: tenants-service-mysql-db-name
      FRONTEGG_USAGE_REPORTING_KAFKA_TOPIC_NAME: tenants-usage-reporting-topic-name
      FRONTEGG_TENANTS_SERVICE_REDIS_DB_INDEX: tenants-redis-db-index
      FRONTEGG_USE_FIREHOSE_ANALYTICS: use-firehose-analytics
      FRONTEGG_TENANT_ASSETS_S3_ENDPOINT: tenant-assets-s3-endpoint
      FRONTEGG_AWS_ENDPOINT: tenant-assets-s3-aws-endpoint
      FRONTEGG_SPLIT_IO_USE_SYNCHRONIZER: splitio-synchronizer
externalSecret:
  enabled: true
  text: |
    {{- $secret := .contents | fromYaml}}
    apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
    fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
    splitIO:
      key: {{ $secret.externalServices.split.sdkKey | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}

    database:
      mongo:
        uri: {{ $secret.databases.mongo.connectionString | toYaml }}
      sql:
        host: {{ $secret.databases.generalMysql.host | toYaml }}
        username: {{ $secret.databases.generalMysql.username | toYaml }}
        password: {{ $secret.databases.generalMysql.password | toYaml }}
    kafka:
      brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
      saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
      saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
    redis:
      host: {{ $secret.databases.redis.host | toYaml }}
      port: {{ $secret.databases.redis.port | toYaml }}
      password: {{ $secret.databases.redis.password | toYaml }}
      tls: {{ $secret.databases.redis.tls | toYaml }}
    analytics:
      firehose:
        awsRegion: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
        awsAccessKey: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
        awsSecretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
  additionalSecrets: ""
