{{ $values := .Values }}
{{- $debezium := $values.debezium }}
{{- $top := $ }}
{{- if $values.debezium.enabled }}
{{- if $values.debezium.debeziumOperator.enabled }}
apiVersion: debezium.io/v1alpha1
kind: DebeziumServer
metadata:
  name: debezium-mysql-server
spec:
  # Debezium server version (must match operator compatibility)
  version: {{ $debezium.debeziumOperator.version | quote }}
  # (optional) override image; otherwise operator picks default for version
  image: {{ $debezium.debeziumOperator.image | quote }}

  # === RUN-TIME / K8S SETTINGS ===
  runtime:
    # inject all keys from the Secret as env vars
    environment:
      from:
        - secretRef:
            name: {{ $values.initDbJob.secret.name }}
    # ephemeral storage for offsets & schema history (Pod-local)
    storage:
      data:
        type: ephemeral

  # === SOURCE CONNECTOR ===
  source:
    class: io.debezium.connector.mysql.MySqlConnector
    config:
      database.hostname: ${host}
      database.port: 3306
      database.user: ${username}
      database.password: ${password}

      schema.history.internal.kafka.bootstrap.servers: |
        {{ required "Values.debezium.bootstrapServers must be set" $values.debezium.bootstrapServers }}
      schema.history.internal.kafka.topic: dbhistory.identity
      database.server.id: 184051
      database.server.name: identity
      database.include.list: frontegg_identity
      table.include.list: >
        frontegg_identity.users,
        frontegg_identity.users_tenants,
        frontegg_identity.users_tenants_roles,
        frontegg_identity.roles
      snapshot.mode: schema_only
      include.schema.changes: true
      tombstones.on.delete: false
      message.key.columns: >
        frontegg_identity.users_tenants:vendorId,tenantId,userId;
        frontegg_identity.users:vendorId,email
      key.converter: org.apache.kafka.connect.json.JsonConverter
      value.converter: org.apache.kafka.connect.json.JsonConverter
      key.converter.schemas.enable: false
      value.converter.schemas.enable: false
      transforms: unwrap
      transforms.unwrap.type: io.debezium.transforms.ExtractNewRecordState
      transforms.unwrap.delete.handling.mode: rewrite
      transforms.unwrap.drop.tombstones: false
      transforms.unwrap.add.fields: op,table,source.ts_ms
      topic.prefix: identity
  # === SINK === (write into Kafka)
  sink:
    type: kafka
    config:
      producer.bootstrap.servers: {{ required "Values.debezium.bootstrapServers must be set" $values.debezium.bootstrapServers }}
      producer.key.serializer: org.apache.kafka.common.serialization.StringSerializer
      producer.value.serializer: org.apache.kafka.common.serialization.StringSerializer
      topic.prefix: identity

  # === OUTPUT FORMAT ===
  format:
    key:
      type: json
      config:
        schemas.enable: false
    value:
      type: json
      config:
        schemas.enable: false
{{- end }}
{{- end }}