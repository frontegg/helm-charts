tenants-service:
  name: tenants
  team: frontegg
  envID: "prod-main-secret20250407120514343900000001"
  appVersion: 5ef236f
  argoRollouts:
    enabled: false
  image:
    repository: frontegg/tenants-service
    prefix: 527305576865.dkr.ecr.us-east-1.amazonaws.com/docker-hub/
  defaults:
    migration:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-5"
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    configmap:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    secret:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
        "helm.sh/hook-delete-policy": "before-hook-creation"
    sereviceAccount:
      annotations:
        "helm.sh/hook": pre-install, pre-upgrade
        "helm.sh/hook-weight": "-100"
  web:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "service"]
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        memory: 1Gi
    service:
      ports:
        - port: 80
          targetPort: 3015
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3015
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 40
      periodSeconds: 60
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
  worker:
    enabled: true
    command: ["/bin/bash"]
    args: ["entrypoint.sh", "worker"]
    labels:
      scrape-for-metrics: enabled
    replicaCount: 1
    service:
      ports:
        - port: 80
          targetPort: 3015
          protocol: TCP
          name: http
    ports:
      - name: http
        containerPort: 3015
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 2
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 75
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
    livenessProbe:
      failureThreshold: 5
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 60
      periodSeconds: 60
    readinessProbe:
      failureThreshold: 1
      httpGet:
        path: /health
        port: http
      initialDelaySeconds: 5
      periodSeconds: 5
  jobs:
    migrate:
      enabled: true
      spec:
        command: ["/bin/bash"]
        args: ["run-migrations.sh"]
        resources:
          requests:
            cpu: 300m
            memory: 500Mi

  configmap:
    data:
      CLOUD_ENVIRONMENT: dev
      NODE_ENV: production
      FRONTEGG_JAEGER_ENABLED: "true"
      FRONTEGG_ANALYTICS_TYPE: firehose
      LOG_LEVEL: verbose
      FRONTEGG_CONFIG_DIRECTORY: /etc/config

  configuration:
    map:
      config-center:
        FRONTEGG_VENDORS_SERVICE_URL: vendors-service-url
        FRONTEGG_ADMINS_SERVICE_URL: admins-service-url
        FRONTEGG_JAEGER_ENDPOINT: tracing-collector-endpoint
        FRONTEGG_TENANT_ASSETS_S3_BUCKET: tenant-assets-s3-bucket
        FRONTEGG_TENANTS_SERVICE_MYSQL_DB_NAME: tenants-service-mysql-db-name
        FRONTEGG_USAGE_REPORTING_KAFKA_TOPIC_NAME: tenants-usage-reporting-topic-name
        FRONTEGG_TENANTS_SERVICE_REDIS_DB_INDEX: tenants-redis-db-index
        FRONTEGG_TENANT_ASSETS_S3_ENDPOINT: tenant-assets-s3-endpoint
        FRONTEGG_AWS_ENDPOINT: tenant-assets-s3-aws-endpoint

  externalSecret:
    enabled: true
    mountPath: /etc/config/config.yaml
    text: |
      {{- $secret := .contents | fromYaml }}
      apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey | toYaml }}
      fronteggClientId: {{ $secret.frontegg.xxx.fronteggClientId | toYaml }}
      splitIO:
        key: {{ $secret.externalServices.split.sdkKey | toYaml }}
        redis:
          host: {{ $secret.databases.redis.host | toYaml }}
          port: {{ $secret.databases.redis.port | toYaml }}
          password: {{ $secret.databases.redis.password | toYaml }}

      database:
        mongo:
          uri: {{ $secret.databases.mongo.connectionString | toYaml }}
        sql:
          host: {{ $secret.databases.generalMysql.host | toYaml }}
          username: {{ $secret.databases.generalMysql.username | toYaml }}
          password: {{ $secret.databases.generalMysql.password | toYaml }}
      kafka:
        brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
        saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
        saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      redis:
        host: {{ $secret.databases.redis.host | toYaml }}
        port: {{ $secret.databases.redis.port | toYaml }}
        password: {{ $secret.databases.redis.password | toYaml }}
        tls: {{ $secret.databases.redis.tls | toYaml }}
      analytics:
        firehose:
          awsRegion: {{ $secret.frontegg.analytics.firehoseRegion | toYaml }}
          awsAccessKey: {{ $secret.frontegg.analytics.firehoseAccessKeyId | toYaml }}
          awsSecretAccessKey: {{ $secret.frontegg.analytics.firehoseSecretAccessKey | toYaml }}
      cloudflare:
        cdn:
          zoneId: {{ $secret.externalServices.cloudflare.purgeCache.zone | toYaml }}
          apiKey: {{ $secret.externalServices.cloudflare.purgeCache.token | toYaml }}

    additionalSecrets: ""