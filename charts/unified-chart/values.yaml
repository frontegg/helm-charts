# Default values for frontegg unified chart.

# required
# name: my-new-awesome-service
# team: my-team-of-imbeciles
# envID: local

# CAUTION this will change name of all manifests
nameSuffix: v2

# appVersion is required
# appVersion: master-latest

argoRollouts: true

image:
  repository:

revisionHistoryLimit: 3

imagePullPolicy: Always

imagePullSecrets:
  - name: regcred

service:
  labels:
    monitoring-metrics: enabled
  type: ClusterIP
  protocol: TCP
  port: 80

web:
  enabled: false
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "service"]
  env: []
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    triggers: []
    advanced:
      horizontalPodAutoscalerConfig:
        name: '{{ include "unified.web.name" $ }}'

  podAnnotations: {}
  resources: {}
  terminationGracePeriodSeconds: 30
  # handles restart (not offline)
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 40
    periodSeconds: 60
  # decides when to forward requests (not offline)
  readinessProbe:
    failureThreshold: 1
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  nodeSelector: {}
  tolerations: []
  affinity: {}

worker:
  enabled: false
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "worker"]
  replicaCount: 1
  autoscaling:
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    scaledObject:
      enabled: false
      triggers: []
      advanced:
        horizontalPodAutoscalerConfig:
          name: '{{ include "unified.worker.name" $ }}'
  env: []
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 40
    periodSeconds: 60
  readinessProbe:
    failureThreshold: 1
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  nodeSelector: {}
  tolerations: []
  affinity: {}

highPriority:
  enabled: false
  labels:
    priority: "high"
  replicaCount: 1
  env: []
  autoscaling:
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    scaledObject:
      enabled: false
      triggers: []
      advanced:
        horizontalPodAutoscalerConfig:
          name: '{{ include "unified.hp.name" $ }}'

jobs:
  mgr:
    enabled: false
    metadata:
      annotations:
        helm.sh/hook: pre-install,pre-upgrade
        helm.sh/hook-weight: "-2"
        helm.sh/hook-delete-policy: "before-hook-creation"
    spec:
      annotations: {}
      command: ["/bin/bash"]
      args: ["run-migrations.sh"]
      resources:
        requests:
          cpu: 500m
          memory: 500Mi

cronjobs:
  refresh:
    enabled: false
    metadata:
      annotations:
        argocd.argoproj.io/sync-wave: "-500"
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    schedule: "0 * * * *"
    ttlSecondsAfterFinished: 600
    concurrencyPolicy: Replace
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 1
    restartPolicy: Never
    nodeSelector: {}

configmap:
  annotations:
    # argocd.argoproj.io/sync-wave: "-1000"
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-2"
    helm.sh/hook-delete-policy: "before-hook-creation"
  data:
    # EXAMPLE: '{{ include "fullname" $ }}-example'

configuration:
  map:
    config-center:
      key-in-config-center: key

externalSecret:
  enabled: false
  mountPath: /etc/config/config.yaml
  subPath: config
  refreshInterval: 1m
  annotations:
    # argocd.argoproj.io/sync-wave: "-1000"
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-4"
    helm.sh/hook-delete-policy: "before-hook-creation"
  text: |
    {{- $secret := .contents | fromYaml }}
    apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey| default "x" }}
  additionalSecrets: ""

prometheusRule:
  enabled: false
  namespace: observability
  labels:
    release: prometheus
  rpsAlertLimit: 50
  rules:
    - alert: EXAMPLE
      expr: |
        round(sum(irate(nginx_ingress_controller_requests{ingress="{{ include "unified.name" . }}-ingress"}[2m])) , 0.001) > {{ .Values.prometheusRule.rpsAlertLimit }}
      for: 1m
      labels:
        severity: critical
      annotations:
        description: EXAMPLE RPS is higher then {{ .Values.prometheusRule.rpsAlertLimit }} for 2 minutes or more
        summary: EXAMPLE RPS is higher than {{ .Values.prometheusRule.rpsAlertLimit }}

ingress:
  enabled: false
  ingressClassName: nginx
  hostnameOverride: "example.changeme"
  annotations:
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* ^/(metrics|health) {
        deny all;
        return 403;
      }
  tls:
    enabled: false
    secretName: frontegg-secret-2020

albIngress:
  enabled: false
  ingressClassName: nginx2
  hostnameOverride: ""
  annotations:
    nginx.ingress.kubernetes.io/server-snippet: |
      location ~* ^/(metrics|health) {
        deny all;
        return 403;
      }

serviceProfile:
  # routes:
  #   - condition:
  #       method: EXAMPLE
  #       pathRegex: /example/test/
  #     name: EXAMPLE /example/test/

# additional helm templates to render resources freely
additionalTemplates: |

# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: {{ include "fullname" $ }}-sa
#   labels:
#     {{- include "unified.labels" $ | nindent 4 }}

keda:
  annotations:
    scaledobject.keda.sh/transfer-hpa-ownership: "true"
    validations.keda.sh/hpa-ownership: "false"

serviceAccount:
  enabled: false
  annotations: {}
