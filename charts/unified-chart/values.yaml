# Default values for frontegg unified chart.

# required
# name: my-new-awesome-service
# team: my-team-of-imbeciles

envID: local

# CAUTION this will change name of all manifests
nameSuffix: v2

# appVersion is required
# appVersion: master-latest

argoRollouts: true

image:
  repository:

revisionHistoryLimit: 3

imagePullPolicy: Always

imagePullSecrets:
  - name: regcred

web:
  enabled: true
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "service"]
  env:
    # - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
    #   value: "false"
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
  podAnnotations: {}
  resources: {}
  terminationGracePeriodSeconds: 30
  # handles restart (not offline)
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 40
    periodSeconds: 60
  # decides when to forward requests (not offline)
  readinessProbe:
    failureThreshold: 1
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  nodeSelector: {}
  tolerations: []
  affinity: {}

worker:
  enabled: false
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "worker"]
  env:
    # - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
    #   value: "true"

service:
  type: ClusterIP

jobs:
  # migrate:
  #   enabled: true
  #   metadata:
  #     annotations:
  #       argocd.argoproj.io/sync-wave: "-500"
  #   spec:
  #     command: ["/bin/bash"]
  #     args: ["run-migrations.sh"]
  #     resources:
  #       requests:
  #         cpu: 500m
  #         memory: 500Mi

cronjobs:
  refresh:
    enabled: false
    metadata:
      annotations:
        argocd.argoproj.io/sync-wave: "-500"
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    schedule: "0 * * * *"
    ttlSecondsAfterFinished: 600
    concurrencyPolicy: Replace
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 1
    restartPolicy: Never
    nodeSelector: {}

configmap:
  annotations:
    # argocd.argoproj.io/sync-wave: "-1000"
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-2"
    helm.sh/hook-delete-policy: "before-hook-creation"
  data:
    # EXAMPLE: '{{ include "fullname" $ }}-example'

configuration:
  map:
    config-center:

externalSecret:
  enabled: false
  mountPath: /etc/config/config.yaml
  subPath: config
  refreshInterval: 1m
  annotations:
    # argocd.argoproj.io/sync-wave: "-1000"
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-4"
    helm.sh/hook-delete-policy: "before-hook-creation"
  text: |
    {{- $secret := .contents | fromYaml }}
    apiKey: {{ $secret.frontegg.apiKeys.tenantsServiceApiKey| default "x" }}
  additionalSecrets: ""

prometheusRule:
  enabled: false

ingress:
  enabled: false

albIngress:
  enabled: false

highPriority:
  enabled: false
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "service"]
  env:
    # - name: FRONTEGG_IS_SERVICE_OFFLINE_PROCESS
    #   value: "false"
  labels:
    priority: "high"
  replicaCount: 1
  autoscaling:
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75

serviceProfile:
  # routes:
  #   - condition:
  #       method: EXAMPLE
  #       pathRegex: /example/test/
  #     name: EXAMPLE /example/test/

# additional helm templates to render resources freely
additionalTemplates: |

# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: {{ include "fullname" $ }}-sa
#   labels:
#     {{- include "unified.labels" $ | nindent 4 }}
