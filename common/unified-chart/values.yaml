# Default values for frontegg unified chart.

# required values
# name: my-new-awesome-service
# team: my-team-of-imbeciles
# envID: local
# appVersion: production-global-19900101.101010-zxc111y

# CAUTION this will change name of all manifests
nameSuffix: v2

argoRollouts:
  enabled: true
  activeMetadata:
    labels:
      role: active
  progressiveDelivery:
    enabled: false
    stableMetadata:
      labels:
        role: stable
    canaryMetadata:
      labels:
        role: canary
    blackBox:
      url: http://nexus-v2-web.frontegg.svc.cluster.local/blackbox
      timeout: 1200 # Timeout for each request
      consecutiveErrorLimit: 0
      method: POST
      failureLimit: 1
      headers:
        - key: Content-Type # if body is a json, it is recommended to set the Content-Type
          value: "application/json"
    steps:
      replicas: 1

image:
  repository:
  prefix:

defaults:
  scrape:
    labels:
      monitoring-metrics: enabled
  migration:
    resources:
      # by default same requests as limit to ensure high QOS
      requests:
        cpu: 250m
        memory: 1Gi
      limits:
        cpu: 250m
        memory: 1Gi
    annotations:
      argocd.argoproj.io/sync-wave: "-10"
      argocd.argoproj.io/sync-options: Force=true,Replace=true
  configmap:
    annotations:
      argocd.argoproj.io/sync-wave: "-100"
      argocd.argoproj.io/sync-options: Force=true,Replace=true
  secret:
    annotations:
      argocd.argoproj.io/sync-wave: "-100"
      argocd.argoproj.io/sync-options: Force=true,Replace=true
  serviceAccount:
    annotations:
      argocd.argoproj.io/sync-wave: "-100"

revisionHistoryLimit: 2

imagePullPolicy: Always

imagePullSecrets:
  - name: regcred

web:
  enabled: false
  env: []
  # - name: SOME_WEB_VAR
  #   value: some_web_value
  additionalVolumes: ""
  # |
  # - name: vol-acl-config
  #   configMap:
  #     name: '{{ include "fullname" $ }}-acl-config'
  additionalVolumeMounts: ""
  # |
  # - name: vol-acl-config
  #   mountPath: /etc/smokescreen/acl.yaml
  #   subPath: acl.yaml
  pdb:
    enabled: true
    # The use of maxUnavailable is recommended as it automatically responds to changes in the number of replicas.
    # only 1 of maxUnavailable or minAvailable is allowed
    # can be an integer or precentage
    maxUnavailable: 30%
    # minAvailable: 50%
  service:
    scrape: true
    labels: {}
    type: ClusterIP
    protocol: TCP
    ports: []
    # - port: 80
    #   targetPort: 3000
    #   protocol: TCP
    #   name: http
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "service"]
  replicaCount: 1
  podAnnotations: {}
  ports:
    - name: http
      containerPort: 3000
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    scaledObject:
      enabled: false
      triggers: []
      advanced:
        horizontalPodAutoscalerConfig:
          name: '{{ include "web.name" $ }}'
  serviceProfile:
    enabled: false
    # routes:
    #   - condition:
    #       method: EXAMPLE
    #       pathRegex: /example/test/
    #     name: EXAMPLE /example/test/

  terminationGracePeriodSeconds: 45
  livenessProbe:
    # failureThreshold: 3
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 40
    # periodSeconds: 60
  readinessProbe:
    # failureThreshold: 1
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 5
    # periodSeconds: 5
  nodeSelector: {}
  tolerations: []
  affinity: {}

worker:
  enabled: false
  env: []
  #   - name: SOME_WORKER_VAR
  #     value: some_worker_value
  additionalVolumes: ""
  # |
  # - name: vol-acl-config
  #   configMap:
  #     name: '{{ include "fullname" $ }}-acl-config'
  additionalVolumeMounts: ""
  # |
  # - name: vol-acl-config
  #   mountPath: /etc/smokescreen/acl.yaml
  #   subPath: acl.yaml
  service:
    labels: {}
    type: ClusterIP
    protocol: TCP
    ports: []
    # - port: 80
    #   targetPort: 3000
    #   protocol: TCP
    #   name: http
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "worker"]
  podAnnotations: {}
  replicaCount: 1
  ports:
    - name: http
      containerPort: 3000
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    scaledObject:
      enabled: false
      triggers: []
      advanced:
        horizontalPodAutoscalerConfig:
          name: '{{ include "worker.name" $ }}'
  terminationGracePeriodSeconds: 45
  livenessProbe:
    # failureThreshold: 3
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 40
    # periodSeconds: 60
  readinessProbe:
    # failureThreshold: 1
    # httpGet:
    #   path: /health
    #   port: http
    # initialDelaySeconds: 5
    # periodSeconds: 5
  nodeSelector: {}
  tolerations: []
  affinity: {}

hp:
  enabled: false
  env: []
  # - name: SOME_WEB_VAR
  #   value: some_web_value
  additionalVolumes: ""
  # |
  # - name: vol-acl-config
  #   configMap:
  #     name: '{{ include "fullname" $ }}-acl-config'
  additionalVolumeMounts: ""
  # |
  # - name: vol-acl-config
  #   mountPath: /etc/smokescreen/acl.yaml
  #   subPath: acl.yaml
  pdb:
    enabled: true
    # The use of maxUnavailable is recommended as it automatically responds to changes in the number of replicas.
    # only 1 of maxUnavailable or minAvailable is allowed
    # can be an integer or precentage
    maxUnavailable: 30%
    # minAvailable: 50%
  service:
    scrape: true
    labels: {}
    type: ClusterIP
    protocol: TCP
    ports: []
    # - port: 80
    #   targetPort: 3000
    #   protocol: TCP
    #   name: http
  command: ["/bin/bash"]
  args: ["entrypoint.sh", "p1-service"]
  labels:
    priority: "high"
  replicaCount: 1
  podAnnotations: {}
  serviceProfile:
    enabled: false
    # routes:
    #   - condition:
    #       method: EXAMPLE
    #       pathRegex: /example/test/
    #     name: EXAMPLE /example/test/
  ports:
    - name: http
      containerPort: 3000
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    scaledObject:
      enabled: false
      triggers: []
      advanced:
        horizontalPodAutoscalerConfig:
          name: '{{ include "hp.name" $ }}'
  terminationGracePeriodSeconds: 45
  nodeSelector: {}
  tolerations: []
  affinity: {}


jobs:
  mgr:
    enabled: false
    metadata:
      annotations: {}
    spec:
      # image: ""
      annotations: {}
      command: ["/bin/bash"]
      args: ["run-migrations.sh"]
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
      additionalVolumes: ""
      # |
      # - name: worker-vol
      #   configMap:
      #     name: '{{ include "fullname" $ }}-worker'
      additionalVolumeMounts: ""
      # |
      # - name: worker-vol
      #   mountPath: /etc/smokescreen/acl.yaml
      #   subPath: acl.yaml

cronjobs:
  refresh:
    enabled: false
    metadata:
      annotations: {}
    command: []
    args: []
    schedule: "0 * * * *"
    ttlSecondsAfterFinished: 600
    concurrencyPolicy: Replace
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 1
    restartPolicy: Never
    nodeSelector: {}

configmap:
  annotations: {}
  data:
    name: '{{ include "fullname" $ }}'

configuration:
  map:
    config-center:
      # ENV_VARIABLE_NAME: key-in-config-center

externalSecret:
  enabled: false
  mountPath: /etc/config/config.yaml
  subPath: config
  refreshInterval: 1m
  annotations: {}
  text: |
    {{- $secret := .contents | fromYaml }}
    apiKey: {{ $secret.frontegg.apiKeys.someServiceApiKey | default "xxx" }}
  additionalSecrets: ""

prometheusRule:
  enabled: false
  namespace: observability
  labels:
    release: prometheus
  rpsAlertLimit: 50
  rules:
    - alert: EXAMPLE
      expr: |
        round(sum(irate(nginx_ingress_controller_requests{ingress="{{ include "name" . }}-ingress"}[2m])) , 0.001) > {{ .Values.prometheusRule.rpsAlertLimit }}
      for: 1m
      labels:
        severity: critical
      annotations:
        description: EXAMPLE RPS is higher then {{ .Values.prometheusRule.rpsAlertLimit }} for 2 minutes or more
        summary: EXAMPLE RPS is higher than {{ .Values.prometheusRule.rpsAlertLimit }}

ingresses:
  tesla:
    enabled: false
    ingressClassName: nginx
    hostname: ""
    service:
      port: 80
    annotations:
    tls:
      enabled: false
      secretName: frontegg-secret-2020

  newton:
    enabled: false
    ingressClassName: nginx2
    hostname: "isaac.newton"
    service:
      name: '{{ include "web.name" $ }}'
      port: 80
    annotations:

keda:
  annotations: {}
  # scaledobject.keda.sh/transfer-hpa-ownership: "true"
  # validations.keda.sh/hpa-ownership: "false"

serviceAccount:
  enabled: true
  annotations: {}
  nameOverride: ""

role:
  enabled: false
  kind: Role
  namespace: ""
  rules: []

rolebinding:
  enabled: false
  namespace: ""

# additional helm resources to render resources freely
additionalResources: |

# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: {{ include "fullname" $ }}-sa
#   labels:
#     {{- include "labels" $ | nindent 4 }}
