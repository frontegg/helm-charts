name: crappy
team: shitballz
envID: local
appVersion: production-global-19900101.101010-zxc111y

image:
  repository: frontegg/crappy-service

linkerd:
  enabled: true

externalSecret:
  enabled: true
  annotations:
    someting: cool
  mountPath: /etc/config/config.yaml
  text: |
    {{- $secret := .contents | fromYaml }}
    apiKey: {{ $secret.frontegg.apiKeys.logsStreamingServiceApiKey | toYaml }}
    splitIOKey: {{ $secret.externalServices.split.sdkKey | toYaml }}
    kafka:
      brokerList: {{ $secret.databases.kafka.brokerList | toYaml }}
      saslUsername: {{ $secret.databases.kafka.saslUserName | toYaml }}
      saslPassword: {{ $secret.databases.kafka.saslPassword | toYaml }}
    databases:
      mysql:
        host: {{ $secret.databases.generalMysql.host | toYaml }}
        username: {{ $secret.databases.generalMysql.username | toYaml }}
        password: {{ $secret.databases.generalMysql.password | toYaml }}

configmap:
  annotations:
    something/else: bugger

configuration:
  map:
    config-center:
      ENV_VAR: key-in-config-center

prometheusRule:
  enabled: true

ingresses:
  tesla:
    enabled: true
    hostname: nicola.tesla
    annotations:
      nginx.ingress.kubernetes.io/server-snippet: |
        location ~* ^/(metrics|health) {
          deny all;
          return 403;
        }
  newton:
    enabled: true
    hostname: isaac.newton
    service:
      name: "frontegg-api-gateway"
  galileo:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/server-snippet: |
        location ~* ^/(metrics|health) {
          deny all;
          return 403;
        }
    rules:
      - hostname: galileo.galilei
        paths:
          - path: /galileo
            servicePort: 8080
            pathType: Prefix
          - path: /galilei
      - hostname: alon.wanted.more.hosts
        paths:
          - path: /alon
            servicePort: 8080
            pathType: Prefix
          - path: /smartass

web:
  enabled: true
  service:
    ports:
      - port: 8080
        targetPort: 3050
        protocol: TCP
        name: http
  ports:
    - name: http
      containerPort: 3050
  podAnnotations:
    linkerd.io/inject: crappy # test to ensure linkerd is not injected if not enabled
    some/other: anot
    some/other2: anot2
  labels:
    scrape-for-metrics: enabled
  autoscaling:
    enabled: true
    scaledObject:
      enabled: true
  serviceProfile:
    enabled: true
    routes:
      - condition:
          method: XXXX
          pathRegex: /pathx
        name: GET /pathx
      - condition:
          method: YYYYYY
          pathRegex: /pathy
        name: PUT /pathy
      - condition:
          method: ZZZZZZ
          pathRegex: /pathz
        name: /pathz

hp:
  enabled: true
  service:
    labels:
      monitoring-metrics: enabled
    ports:
      - port: 80
        targetPort: 3000
        name: http
  ports:
    - name: http
      containerPort: 3000
  podAnnotations:
    some/other: hp
    some/other2: hp2
  autoscaling:
    enabled: true
    scaledObject:
      enabled: true
  env:
    - name: SOME_ENV
      value: some_val

worker:
  enabled: true
  service:
    labels:
      monitoring-metrics: enabled
    ports:
      - port: 80
        targetPort: 3000
        name: access-port
  env:
    - name: SOME_ENV
      value: some_val
  labels:
    scrape-for-metrics: enabled
  nodeSelector:
    workload: general
  ports:
    - name: access-port
      containerPort: 3000
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 75
    scaledObject:
      enabled: true
      triggers:
        - type: cpu
          metadata:
            type: Utilization
            value: "80"
        - type: memory
          metadata:
            type: Utilization
            value: "75"
        - type: prometheus
          name: kafka time lag
          metadata:
            serverAddress: http://vmselect-vm.observability.svc.cluster.local:8481/select/0/prometheus
            query: max(sum(aws_kafka_estimated_max_time_lag_maximum{dimension_Consumer_Group=~".*api-gateway.*" }) by (dimension_Consumer_Group))
            threshold: "50"
      advanced:
        horizontalPodAutoscalerConfig:
          behavior:
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
                - type: Pods
                  value: 1
                  periodSeconds: 60
            scaleUp:
              stabilizationWindowSeconds: 0
              policies:
                - type: Pods
                  value: 1
                  periodSeconds: 15

jobs:
  mgr:
    enabled: true
    metadata:
      annotations:
        helm.sh/hook-weight: "-200"
        something/mgr: someannotation-mgr
    spec:
      annotations: {}
      command: ["/bin/bash"]
      args: ["run-migrations.sh"]
      resources:
        requests:
          cpu: 500m
          memory: 500Mi
  test:
    enabled: true
    spec:
      image: testimage
      command: ["/bin/bash"]
      args: ["test"]

  test2:
    enabled: true
    metadata:
      annotations:
        shit: test2
    spec:
      command: ["/bin/bash"]
      args: ["test"]

cronjobs:
  refresh:
    enabled: true
    metadata:
      annotations:
        something/cronjob: someannotation
    command: ["/bin/bash"]
    args: ["entrypoint.sh"]
    schedule: "0 * * * *"
    ttlSecondsAfterFinished: 600
    concurrencyPolicy: Replace
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 1
    restartPolicy: Never
    image: pieceofshit:image
    nodeSelector: {}

serviceAccount:
  enabled: true
  annotations:
    someshit/knuckle: enabled

role:
  enabled: true
  namespace: "test"
  rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["*"]

rolebinding:
  namespace: "test"
  enabled: true
